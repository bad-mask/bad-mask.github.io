<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[「java 反射」]]></title>
      <url>/2017/09/26/%E3%80%8Cjava%20%E5%8F%8D%E5%B0%84%E3%80%8D/</url>
      <content type="html"><![CDATA[<h6 id="original-bad-mask-2017-09-26"><a href="#original-bad-mask-2017-09-26" class="headerlink" title="original bad-mask  2017-09-26"></a>original bad-mask  2017-09-26</h6><p>其实原本这篇文章没啥必要，但是最近在 code review 的时候，发现[这篇文章]（<a href="http://www.jianshu.com/p/4ba461d3c670）中下面这段代码有些疑问，所以就去查了查" target="_blank" rel="external">http://www.jianshu.com/p/4ba461d3c670）中下面这段代码有些疑问，所以就去查了查</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">  <span class="meta">@SuppressLint</span>(<span class="string">"NewApi"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isNotificationEnabled</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">    AppOpsManager appOpsManager = (AppOpsManager) context.getSystemService(Context.APP_OPS_SERVICE);</div><div class="line">    ApplicationInfo applicationInfo = context.getApplicationInfo();</div><div class="line">    String pkg = context.getApplicationContext().getPackageName();</div><div class="line">    <span class="keyword">int</span> uid = applicationInfo.uid;</div><div class="line">    Class appOpsClass;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        appOpsClass = Class.forName(AppOpsManager.class.getName());</div><div class="line">        Method checkOpNoThrowMethod = appOpsClass.getMethod(<span class="string">"checkOpNoThrow"</span>, Integer.TYPE, Integer.TYPE, String.class);</div><div class="line">        Field opPostNotificationValue = appOpsClass.getDeclaredField(<span class="string">"OP_POST_NOTIFICATION"</span>);</div><div class="line">        <span class="keyword">int</span> value = (Integer) opPostNotificationValue.get(Integer.class);</div><div class="line">        <span class="keyword">return</span> ((Integer) checkOpNoThrowMethod.invoke(appOpsManager, value, uid, pkg) == AppOpsManager.MODE_ALLOWED);</div><div class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>很明显，这段代码中运用了反射，可是在AppOpsManager 类中的 checkOpNoThrow 方法代码是这样的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Like &#123;<span class="doctag">@link</span> #checkOp&#125; but instead of throwing a &#123;<span class="doctag">@link</span> SecurityException&#125; it</div><div class="line"> * returns &#123;<span class="doctag">@link</span> #MODE_ERRORED&#125;.</div><div class="line"> * <span class="doctag">@hide</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">checkOpNoThrow</span><span class="params">(<span class="keyword">int</span> op, <span class="keyword">int</span> uid, String packageName)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">return</span> mService.checkOperation(op, uid, packageName);</div><div class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> MODE_ERRORED;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>方法明明是 public ，自己还愚蠢的写了这么一段代码，看看能不能代替反射的那段代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">appOpsManager.checkOpNoThrow(<span class="string">"OP_POST_NOTIFICATION"</span>,uid,pkg)== AppOpsManager.MODE_ALLOWED)</div></pre></td></tr></table></figure>
<p>运行，直接crash，报错如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java.lang.IllegalArgumentException: Unknown operation string: OP_POST_NOTIFICATION</div></pre></td></tr></table></figure>
<p>仔细看了一下，AppOpsManager 类中的 checkOpNoThrow 方法，带有 hide 标签，去一探究竟～</p>
<p>######「@hide」标签<br>类或 API 是否开放，是通过 doc 注释的「@hide」标签来控制的。「@hide」标签表示不对外公开 api，但是系统内部是可以使用该注释标记的接口的。<br>「@hide」标签注释后的类或者 API 在编译时不对外开放，但是在运行的时候这些类和 API 都是可以访问的。<br>解决方案：一种是使用反射的方法得到隐藏的 API；一种是使用源码编译时生成的全编译的 jar 包。</p>
<h6 id="java-反射的总结"><a href="#java-反射的总结" class="headerlink" title="java 反射的总结"></a>java 反射的总结</h6><p>java 反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法；这种动态获取以及动态调用对象的方法的功能称为 Java 的反射机制。</p>
<p>缺点：性能是一个问题，反射相当于一系列解释操作，通知 jvm 要做的事情，性能比直接的 java 代码要慢很多。</p>
<p>######关于反射的参考链接：<br><a href="http://www.cnblogs.com/rollenholt/archive/2011/09/02/2163758.html" target="_blank" rel="external">http://www.cnblogs.com/rollenholt/archive/2011/09/02/2163758.html</a><br><a href="http://www.cnblogs.com/whoislcj/p/6038511.html" target="_blank" rel="external">http://www.cnblogs.com/whoislcj/p/6038511.html</a><br><a href="https://segmentfault.com/a/1190000010162647" target="_blank" rel="external">https://segmentfault.com/a/1190000010162647</a></p>
<p>######关于 hide 标签参考的链接：<br><a href="https://stackoverflow.com/questions/17035271/what-does-hide-mean-in-the-android-source-code" target="_blank" rel="external">https://stackoverflow.com/questions/17035271/what-does-hide-mean-in-the-android-source-code</a><br><a href="http://blog.csdn.net/ouyang_peng/article/details/17288253" target="_blank" rel="external">http://blog.csdn.net/ouyang_peng/article/details/17288253</a><br><a href="http://blog.sina.com.cn/s/blog_5da93c8f0101e1yj.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_5da93c8f0101e1yj.html</a></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
            <category> 反射 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> 反射 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title></title>
      <url>/2017/09/25/%E3%80%8CFlexboxLayout%20%E5%B8%83%E5%B1%80%E3%80%8D%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>######「大部分内容是实践 + 翻译自<a href="https://www.w3.org/TR/css-flexbox-1/" target="_blank" rel="external">官方文档</a>」</p>
<p>######摘要<br>这个规范描述了一个为用户界面设计所进行了优化的 CSS 框架模型。在这个弹性布局模型中，子元素可以以任何方向设置，子元素设置可以充满未用的布局空间或者缩小空间以避免溢出父控件的布局。可以轻松操作子元素的水平排列或竖直排列。嵌套布局(水平内部垂直，或者垂直内部水平)可以在两个维度上构建布局。</p>
<blockquote>
<p>The specification describes a CSS box model optimized for user interface design. In the flex layout model, the children of a flex container can be laid out in any direction, and can “flex” their sizes, either growing to fill unused space or shrinking to avoid overflowing the parent. Both horizontal and vertical alignment of the children can be easily manipulated. Nesting of these boxes (horizontal inside vertical, or vertical inside horizontal) can be used to build layouts in two dimensions.</p>
</blockquote>
<p>#####简单使用<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line">&lt;com.google.android.flexbox.FlexboxLayout xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">xmlns:app="http://schemas.android.com/apk/res-auto"</div><div class="line">xmlns:tools="http://schemas.android.com/tools"</div><div class="line">android:layout_width="match_parent"</div><div class="line">android:layout_height="match_parent"</div><div class="line">android:padding="10dp"</div><div class="line">app:alignContent="flex_start"</div><div class="line">app:alignItems="stretch"</div><div class="line">app:flexDirection="row"</div><div class="line">app:flexWrap="wrap"</div><div class="line">app:justifyContent="flex_start"</div><div class="line">tools:context="com.badmask_zly.flexboxlayoutdemo.MainActivity"&gt;</div><div class="line"></div><div class="line">&lt;TextView</div><div class="line">android:layout_width="wrap_content"</div><div class="line">android:layout_height="wrap_content"</div><div class="line">android:layout_margin="5dp"</div><div class="line">android:background="@drawable/bg_red"</div><div class="line">android:padding="5dp"</div><div class="line">android:text="Hello World!" /&gt;</div><div class="line"></div><div class="line">&lt;TextView</div><div class="line">android:layout_width="wrap_content"</div><div class="line">android:layout_height="wrap_content"</div><div class="line">android:layout_margin="5dp"</div><div class="line">android:background="@drawable/bg_red"</div><div class="line">android:padding="5dp"</div><div class="line">android:text="Monday" /&gt;</div><div class="line"></div><div class="line">&lt;TextView</div><div class="line">android:layout_width="wrap_content"</div><div class="line">android:layout_height="wrap_content"</div><div class="line">android:layout_margin="5dp"</div><div class="line">android:background="@drawable/bg_red"</div><div class="line">android:padding="5dp"</div><div class="line">android:text="Tuesday" /&gt;</div><div class="line"></div><div class="line"></div><div class="line">&lt;TextView</div><div class="line">android:layout_width="wrap_content"</div><div class="line">android:layout_height="wrap_content"</div><div class="line">android:layout_margin="5dp"</div><div class="line">android:background="@drawable/bg_red"</div><div class="line">android:padding="5dp"</div><div class="line">android:text="Wednesday" /&gt;</div><div class="line"></div><div class="line">&lt;TextView</div><div class="line">android:layout_width="wrap_content"</div><div class="line">android:layout_height="wrap_content"</div><div class="line">android:layout_margin="5dp"</div><div class="line">android:background="@drawable/bg_red"</div><div class="line">android:padding="5dp"</div><div class="line">android:text="Thursday" /&gt;</div><div class="line"></div><div class="line"></div><div class="line">&lt;TextView</div><div class="line">android:layout_width="wrap_content"</div><div class="line">android:layout_height="wrap_content"</div><div class="line">android:layout_margin="5dp"</div><div class="line">android:background="@drawable/bg_red"</div><div class="line">android:padding="5dp"</div><div class="line">android:text="Friday" /&gt;</div><div class="line"></div><div class="line">&lt;/com.google.android.flexbox.FlexboxLayout&gt;</div></pre></td></tr></table></figure></p>
<p>显示如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2644950-e79ab57ab7b7b26f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/240" alt="简单使用.png"></p>
<p>#####属性介绍 – 顺序和方向 ：</p>
<p>######flexDirection : 决定子 item 在 FlexboxLayout 布局中的展示方向。</p>
<table>
<thead>
<tr>
<th style="text-align:center">属性值</th>
<th style="text-align:left">value</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">row</td>
<td style="text-align:left">水平方向，从左到右，展示子 item</td>
</tr>
<tr>
<td style="text-align:center">row-reverse</td>
<td style="text-align:left">水平方向，从右到左，展示子 item</td>
</tr>
<tr>
<td style="text-align:center">column</td>
<td style="text-align:left">竖直方向，从上到下，展示子 item</td>
</tr>
<tr>
<td style="text-align:center">column-reverse</td>
<td style="text-align:left">竖直方向，从下到上，展示子 item</td>
</tr>
</tbody>
</table>
<p>######flexWrap : 决定 FlexboxLayout 布局中子 item 呈现一行还是多行，决定与 flexDirection 所决定方向的垂直方向的展示</p>
<table>
<thead>
<tr>
<th style="text-align:center">属性值</th>
<th style="text-align:left">value</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">nowrap</td>
<td style="text-align:left">不换行</td>
</tr>
<tr>
<td style="text-align:center">wrap</td>
<td style="text-align:left">flexDirection 取水平方向时，竖直方向为从上到下；flexDirection 取竖直方向时，水品方向为从左到右</td>
</tr>
<tr>
<td style="text-align:center">wrap-reverse</td>
<td style="text-align:left">flexDirection 取水平方向时，竖直方向为从下到上；flexDirection 取竖直方向时，水品方向为从右到左</td>
</tr>
</tbody>
</table>
<p>######app:layout_order :<br>FlexboxLayout 布局中子 item 可以设置这个属性。默认情况下，所有的 item 的 order 值都相同。值越小，越靠前。</p>
<p>#####属性介绍 – 灵活性 ：</p>
<p>######layout_flexGrow :<br>相当于 LinearLayout 布局中的 layout_weight 属性。</p>
<p>######layout_flexShrink :<br>属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。<br>如果所有项目的 layout_flexShrink  属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。负值对该属性无效。仅在单行时，此属性有效。</p>
<p>######layout_flexBasisPercent :<br>值为一个百分比，表示设置子元素的长度为它父容器长度的百分比，如果设置了这个值，那么通过这个属性计算的值将会覆盖layout_width或者layout_height的值。注意：此属性在 FlexboxLayout 的宽度设置为 wrap_content 时，。默认值时-1。</p>
<p>#####属性介绍 – 基准 ：</p>
<p>######justifyContent :</p>
<table>
<thead>
<tr>
<th style="text-align:center">属性值</th>
<th style="text-align:left">value</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">center</td>
<td style="text-align:left">居中对齐</td>
</tr>
<tr>
<td style="text-align:center">flex_start</td>
<td style="text-align:left">flexDirection 为row ,子 item ，左对齐; flexDirection 为row_reverse ,子 item ，右对齐;flexDirection 为 column ,子 item ，上对齐;flexDirection 为 column_reverse ,子 item ，下对齐</td>
</tr>
<tr>
<td style="text-align:center">flex_end</td>
<td style="text-align:left">自行对比  flex_start 属性</td>
</tr>
<tr>
<td style="text-align:center">space_around</td>
<td style="text-align:left">每个元素到两侧的距离相等</td>
</tr>
<tr>
<td style="text-align:center">space_between</td>
<td style="text-align:left">两端对齐，中间间隔相同</td>
</tr>
</tbody>
</table>
<p>######alignContent ：当 FlexboxLayout 布局还有额外的空间时，此属性会控制 FlexboxLayout 控件中的行显示或者列显示的对齐方式。此属性对单线容器没有影响。<br>|属性值 | value |<br>|:———-: | :—————|<br>|flex-start |  |<br>| flex-end |  |<br>|center |   |<br>|space-between| |<br>|space-around |  |<br>|stretch |  |</p>
<p>######alignItems ：属性控制元素在副轴方向的对齐方式，单行起作用，有以下5种取值：<br>|属性值 | value |<br>|:———-: | :—————|<br>|stretch (default)  |flexDirection 取水平方向时，子 item 的宽度按照最宽的来展示；flexDirection 取竖直方向时，子 item 的高度按照最高的来展示|<br>| flex_start |交叉轴的起点对齐 |<br>|flex_end | 交叉轴的终点对 |<br>|center|交叉轴的中点对齐|<br>|baseline| 当子 item 显示为多行时，每一行始终与上一行的基线对齐 |</p>
<p>######参考链接：<br><a href="https://github.com/google/flexbox-layout" target="_blank" rel="external"> GitHub 上的开源项目</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[「adb shell dumpsys 命令用法」]]></title>
      <url>/2017/09/23/%E3%80%8Cadb%20shell%20dumpsys%E3%80%8D%E5%91%BD%E4%BB%A4%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<h6 id="original-bad-mask-2017-09-23"><a href="#original-bad-mask-2017-09-23" class="headerlink" title="original bad-mask  2017-09-23"></a>original bad-mask  2017-09-23</h6><p>#####出发点一：<br>Android 引入了「任务栈」的概念，这个概念对于 Android 设备上的返回按键有极其重要的联系。有时候按下返回按钮或者点击关闭当前 Activity 的操作，都不知道 Android 系统会把程序带到哪个 Activity ，不确定这是否是最后一个 Activity 以致退出了整个程序。亦或者一些按钮和操作循环产生 Activity 而造成内存膨胀。对于这些问题，如果能够在调试期间知道当前任务栈的情况，就能很方便的观察和发现问题存在的原因，进而选择正确的 launchMode ，设置且当 Intent 的 Flag 来使程序达到预期的效果。</p>
<p>#####出发点二：<br>手机里装着一个应用，在不反编译也不做其他处理的情况下，你可以对这个应用了解多少。</p>
<p>#####出发点三：「<a href="https://developer.android.com/studio/command-line/dumpsys.html#syntax" target="_blank" rel="external">出自官方文档</a>」<br>dumpsys is a tool that runs on Android devices and provides information about system services. You can call dumpsys from the command line using the <a href="https://developer.android.com/studio/command-line/adb.html" target="_blank" rel="external">Android Debug Bridge (ADB)</a> to get diagnostic output for all system services running on a connected device. This output is typically more verbose than you may want, so use the command line options described below to get output for only the system services you’re interested in. This page also describes how to use dumpsys to accomplish common tasks, such as inspecting input, RAM, battery, or network diagnostics.</p>
<p>命令格式：<br>adb shell dumpsys activity [options] [WHAT]</p>
<p>######option 参数</p>
<table>
<thead>
<tr>
<th>options</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>-a</td>
<td style="text-align:center">包括所有可用 Servier 状态</td>
</tr>
<tr>
<td>-c</td>
<td style="text-align:center">包括 Client 状态，即 App 端情况</td>
</tr>
<tr>
<td>-p PACKAGE</td>
<td style="text-align:center">限定输出指定包名</td>
</tr>
</tbody>
</table>
<p>######WHAT 参数<br>| WHAT | 含义 |<br>| ————- |:————–:|<br>| a[ctivities] | activity 状态 |<br>| b[roadcasts] [PACKAGE_NAME] | broadcast 状态 |<br>| s[ervices] [COMP_SPEC …] |   service 状态 |<br>| prov[iders] [COMP_SPEC …] |   content provider 状态 |<br>| p[rocesses][PACKAGE_NAME] |   进程状态 |<br>| o[om]  |   内存管理 |<br>|  i[ntents] [PACKAGE_NAME] |   pending intent 状态 |<br>| r[ecents]  |   最近 activity  |<br>| perm[issions] |  URI 授权情况 |<br>| all  |   所有 activities 信息 |<br>| top |   顶部 activity 信息 |<br>| package |   package 相关信息 |</p>
<p>#####开始练习</p>
<p>######练习一：<br>输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell dumpsys activity</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">ACTIVITY MANAGER PENDING INTENTS (dumpsys activity intents) //注意一下</div><div class="line">  * PendingIntentRecord&#123;1004eb1 com.tencent.mobileqq broadcastIntent&#125;</div><div class="line">  * PendingIntentRecord&#123;a9858c7 com.google.android.gms broadcastIntent&#125;</div><div class="line">  * PendingIntentRecord&#123;dc3ae3d com.tencent.mm startService&#125;</div><div class="line">// 省略 N 行 ...</div><div class="line"></div><div class="line">ACTIVITY MANAGER BROADCAST STATE (dumpsys activity broadcasts) //注意一下</div><div class="line">  Historical broadcasts [foreground]:</div><div class="line">  #0: BroadcastRecord&#123;63c6dd9 u-1 android.hardware.usb.action.USB_STATE&#125;</div><div class="line">// 省略 N 行 ...</div><div class="line"></div><div class="line">ACTIVITY MANAGER CONTENT PROVIDERS (dumpsys activity providers) //注意一下</div><div class="line">  Published single-user content providers (by class):</div><div class="line">  * ContentProviderRecord&#123;ef6fc1f u0 com.android.providers.telephony/.TelephonyProvider&#125;</div><div class="line">    proc=ProcessRecord&#123;efab720 3684:com.android.phone/1001&#125;</div><div class="line">    singleton=true</div><div class="line">    authority=telephony</div><div class="line">// 省略 N 行 ...</div><div class="line"></div><div class="line">ACTIVITY MANAGER URI PERMISSIONS (dumpsys activity permissions) //注意一下</div><div class="line">  Granted Uri Permissions:</div><div class="line">  * UID 10129 holds:</div><div class="line">    UriPermission&#123;b827fb4 0 @ content://downloads/all_downloads/125&#125;</div><div class="line">    UriPermission&#123;2b167dd 0 @ content://downloads/all_downloads/134&#125;</div><div class="line">    UriPermission&#123;51cbf52 0 @ content://downloads/all_downloads/148&#125;</div><div class="line">    UriPermission&#123;af4a223 0 @ content://downloads/all_downloads/169&#125;</div><div class="line"></div><div class="line">ACTIVITY MANAGER SERVICES (dumpsys activity services) //注意一下</div><div class="line">  User 0 active services:</div><div class="line">  * ServiceRecord&#123;da1e320 u0 com.android.bluetooth/.hid.HidService&#125;</div><div class="line">    app=null</div><div class="line">    created=-12d3h35m44s197ms started=false connections=1</div><div class="line">// 省略 N 行 ...</div><div class="line"></div><div class="line">ACTIVITY MANAGER RECENT TASKS (dumpsys activity recents) //注意一下</div><div class="line">  Recent tasks:</div><div class="line">  * Recent #0: TaskRecord&#123;162657c #917 A=android.task.mms U=0 sz=1&#125;</div><div class="line">// 省略 N 行 ...</div><div class="line"></div><div class="line">ACTIVITY MANAGER ACTIVITIES (dumpsys activity activities) //注意一下</div><div class="line">Display #0 (activities from top to bottom):</div><div class="line">// 省略 N 行 ...</div><div class="line"></div><div class="line">ACTIVITY MANAGER RUNNING PROCESSES (dumpsys activity processes) //注意一下</div><div class="line">  Isolated process list (sorted by uid):</div><div class="line">    Isolated # 0: ProcessRecord&#123;ffa12e5 3187:WebViewLoader-arm64-v8a/1037&#125;</div><div class="line"></div><div class="line">  UID states:</div><div class="line">    UID 1000: UidRecord&#123;15a01ba 1000 P  / 19 procs&#125;</div><div class="line">// 省略 N 行 ...</div></pre></td></tr></table></figure></p>
<p>上面标注「注意一下」的位置，其实是提示可以使用括号中的命令来获取此部分对应的内容：<br>所以「adb shell dumpsys activity」命令等价于依次输出下面 8 条命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">adb shell dumpsys activity intents //主要输出 PendingIntentRecord</div><div class="line">adb shell dumpsys activity broadcasts </div><div class="line">adb shell dumpsys activity providers// Published single-user content providers (by class) / Published user 0 content providers (by class) /</div><div class="line">adb shell dumpsys activity permissions</div><div class="line">adb shell dumpsys activity services</div><div class="line">adb shell dumpsys activity recents</div><div class="line">adb shell dumpsys activity activities</div><div class="line">adb shell dumpsys activity processes</div></pre></td></tr></table></figure></p>
<p>######练习二：<br>输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell dumpsys activity top</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">TASK com.jianshu.haruki id=101</div><div class="line">  ACTIVITY com.jianshu.haruki/com.baiji.jianshu.MainActivity fb571c1 pid=21291</div><div class="line">// ... 只举出了前两行，省略了 N 行代码</div></pre></td></tr></table></figure></p>
<p>获取当前 Android 系统中与用户交互的 Activity 的详细信息，根据输出可得到简书的应用包名是：「com.jianshu .haruki」</p>
<p>######练习三：<br>输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell dumpsys activity activities</div></pre></td></tr></table></figure></p>
<p>意义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">显示当前所有在运行的任务栈，它们的 id 分别是什么。对于每个 Task 也有 Activity 数量等信息，同时也列出了其中的 Activity 列表，并且对于每个 Activity 也有比较详细的描述，比如启动它的 Intent 的内容。如果觉得内容过多，只想看看栈的内容，也可以直接跳到「Running activities (most recent first) 那部分，比较简洁而又明了的列出了栈中的 Activity 列表，就能知道当按下返回键的时候会应该回到哪个 Activity 」</div></pre></td></tr></table></figure></p>
<p>######练习四：<br>输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell dumpsys package com.jianshu.haruki[此处写的是『简书』的应用包名]</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div></pre></td><td class="code"><pre><div class="line">Activity Resolver Table: // 标注：这里开始解析「activity」标签</div><div class="line">  Full MIME Types:</div><div class="line">      text/plain:</div><div class="line">        28edf2a com.jianshu.haruki/com.baiji.jianshu.ui.editor.EditorActivityV19</div><div class="line"></div><div class="line">  Base MIME Types:</div><div class="line">      text:</div><div class="line">        28edf2a com.jianshu.haruki/com.baiji.jianshu.ui.editor.EditorActivityV19</div><div class="line"></div><div class="line">  Schemes: </div><div class="line">      jianshu: // 标注：列出了所有以 jianshu 为 scheme 的 Activity</div><div class="line">        3057264 com.jianshu.haruki/com.baiji.jianshu.ui.messages.submission.SubmissionDetailActivity</div><div class="line">        350011b com.jianshu.haruki/com.baiji.jianshu.MainActivity</div><div class="line">        96cc891 com.jianshu.haruki/com.baiji.jianshu.ui.user.collection.CollectionActivity (2 filters)</div><div class="line">        993c3f6 com.jianshu.haruki/com.baiji.jianshu.ui.user.userinfo.UserCenterActivity (2 filters)</div><div class="line">        f48e2b8 com.jianshu.haruki/com.baiji.jianshu.activity.NotifyDetailActivity</div><div class="line">        f845ccd com.jianshu.haruki/com.baiji.jianshu.ui.articledetail.ArticleDetailActivity</div><div class="line">        fe393f7 com.jianshu.haruki/com.baiji.jianshu.ui.user.notebook.normal.NotebookActivity (2 filters)</div><div class="line">      tencent100410602:</div><div class="line">        3302982 com.jianshu.haruki/com.tencent.tauth.AuthActivity</div><div class="line"></div><div class="line">  Non-Data Actions: // 标注：列出了所有有「intent-filter」标签但是无「data」标签的 Activity</div><div class="line">      android.intent.action.MAIN:</div><div class="line">        4b37893 com.jianshu.haruki/com.baiji.jianshu.ui.splash.SplashScreenActivity</div><div class="line">      com.sina.weibo.sdk.action.ACTION_SDK_REQ_ACTIVITY:</div><div class="line">        3d950d0 com.jianshu.haruki/haruki.jianshu.com.lib_share.weibo.WBShareActivity</div><div class="line">      android.intent.action.CREATE_SHORTCUT:</div><div class="line">        28edf2a com.jianshu.haruki/com.baiji.jianshu.ui.editor.EditorActivityV19</div><div class="line">      // 省略多行</div><div class="line"></div><div class="line">  MIME Typed Actions:</div><div class="line">      android.intent.action.SEND:</div><div class="line">        28edf2a com.jianshu.haruki/com.baiji.jianshu.ui.editor.EditorActivityV19</div><div class="line"></div><div class="line">Receiver Resolver Table: // 标注：这里开始解析「receiver」标签</div><div class="line">  Schemes:</div><div class="line">      package: // 标注：列出了所有以 jianshu 为 scheme 的 receiver</div><div class="line">        c930aef com.jianshu.haruki/com.huawei.android.pushagent.PushEventReceiver</div><div class="line"></div><div class="line">  Non-Data Actions:// 标注：列出了所有含「intent-filter」标签但是无「action」标签的 receiver</div><div class="line">      com.xiaomi.mipush.MESSAGE_ARRIVED:</div><div class="line">        bcaa9fc com.jianshu.haruki/com.baiji.jianshu.ui.receiver.xiaomi.XiaoMiPushReceiver</div><div class="line">      android.intent.action.ACTION_POWER_DISCONNECTED:</div><div class="line">        9fd5885 com.jianshu.haruki/com.igexin.sdk.PushReceiver</div><div class="line">      // 省略多行</div><div class="line"></div><div class="line">Service Resolver Table:// 标注：这里开始解析「service」标签</div><div class="line">  Non-Data Actions:// 标注：列出了所有含「intent-filter」标签但是无「action」标签的 service</div><div class="line">      com.google.firebase.INSTANCE_ID_EVENT:</div><div class="line">        649f732 com.jianshu.haruki/com.google.firebase.iid.FirebaseInstanceIdService</div><div class="line">      com.igexin.sdk.action.service.message:</div><div class="line">        97bac83 com.jianshu.haruki/com.igexin.sdk.PushService</div><div class="line"></div><div class="line">Permissions:</div><div class="line">  Permission [com.jianshu.haruki.permission.C2D_MESSAGE] (88a8e00):</div><div class="line">    sourcePackage=com.jianshu.haruki</div><div class="line">    uid=10141 gids=null type=0 prot=signature</div><div class="line">    perm=Permission&#123;e42a639 com.jianshu.haruki.permission.C2D_MESSAGE&#125;</div><div class="line">    packageSetting=PackageSetting&#123;a1c547e com.jianshu.haruki/10141&#125;</div><div class="line">  Permission [getui.permission.GetuiService.com.jianshu.haruki] (7428ddf):</div><div class="line">    sourcePackage=com.jianshu.haruki</div><div class="line">    uid=10141 gids=null type=0 prot=normal</div><div class="line">    perm=Permission&#123;80a8a2c getui.permission.GetuiService.com.jianshu.haruki&#125;</div><div class="line">    packageSetting=PackageSetting&#123;a1c547e com.jianshu.haruki/10141&#125;</div><div class="line">  Permission [com.jianshu.haruki.permission.MIPUSH_RECEIVE] (c9e6cf5):</div><div class="line">    sourcePackage=com.jianshu.haruki</div><div class="line">    uid=10141 gids=null type=0 prot=signature</div><div class="line">    perm=Permission&#123;f253a8a com.jianshu.haruki.permission.MIPUSH_RECEIVE&#125;</div><div class="line">    packageSetting=PackageSetting&#123;a1c547e com.jianshu.haruki/10141&#125;</div><div class="line"></div><div class="line">Registered ContentProviders:</div><div class="line">  com.jianshu.haruki/com.google.firebase.provider.FirebaseInitProvider:</div><div class="line">    Provider&#123;b6c28fb com.jianshu.haruki/com.google.firebase.provider.FirebaseInitProvider&#125;</div><div class="line">  com.jianshu.haruki/com.baiji.jianshu.db.core.JianshuProvider:</div><div class="line">    Provider&#123;eac1d18 com.jianshu.haruki/com.baiji.jianshu.db.core.JianshuProvider&#125;</div><div class="line">  com.jianshu.haruki/com.sensorsdata.analytics.android.sdk.SensorsDataContentProvider:</div><div class="line">    Provider&#123;8b5e371 com.jianshu.haruki/com.sensorsdata.analytics.android.sdk.SensorsDataContentProvider&#125;</div><div class="line"></div><div class="line">ContentProvider Authorities:</div><div class="line">  [com.jianshu.haruki.SensorsDataContentProvider]:</div><div class="line">    Provider&#123;8b5e371 com.jianshu.haruki/com.sensorsdata.analytics.android.sdk.SensorsDataContentProvider&#125;</div><div class="line">      applicationInfo=ApplicationInfo&#123;b247556 com.jianshu.haruki&#125;</div><div class="line">  [com.jianshu.haruki.firebaseinitprovider]:</div><div class="line">    Provider&#123;b6c28fb com.jianshu.haruki/com.google.firebase.provider.FirebaseInitProvider&#125;</div><div class="line">      applicationInfo=ApplicationInfo&#123;b247556 com.jianshu.haruki&#125;</div><div class="line">  [com.jianshu.haruki.provider]:</div><div class="line">    Provider&#123;eac1d18 com.jianshu.haruki/com.baiji.jianshu.db.core.JianshuProvider&#125;</div><div class="line">      applicationInfo=ApplicationInfo&#123;b247556 com.jianshu.haruki&#125;</div><div class="line"></div><div class="line">Key Set Manager:</div><div class="line">  [com.jianshu.haruki]</div><div class="line">      Signing KeySets: 67</div><div class="line"></div><div class="line">Packages:</div><div class="line">  Package [com.jianshu.haruki] (a1c547e):</div><div class="line">    userId=10141</div><div class="line">    pkg=Package&#123;ca59d7 com.jianshu.haruki&#125;</div><div class="line">    codePath=/data/app/com.jianshu.haruki-2</div><div class="line">    resourcePath=/data/app/com.jianshu.haruki-2</div><div class="line">    legacyNativeLibraryDir=/data/app/com.jianshu.haruki-2/lib</div><div class="line">    primaryCpuAbi=arm64-v8a</div><div class="line">    secondaryCpuAbi=null</div><div class="line">    versionCode=2017082915 targetSdk=23</div><div class="line">    versionName=2.6.0</div><div class="line">    splits=[base]</div><div class="line">    applicationInfo=ApplicationInfo&#123;b247556 com.jianshu.haruki&#125;</div><div class="line">    flags=[ HAS_CODE ALLOW_CLEAR_USER_DATA LARGE_HEAP ]</div><div class="line">    dataDir=/data/user/0/com.jianshu.haruki</div><div class="line">    supportsScreens=[small, medium, large, xlarge, resizeable, anyDensity]</div><div class="line">    timeStamp=2017-09-22 15:39:43</div><div class="line">    firstInstallTime=2017-09-22 15:38:20</div><div class="line">    lastUpdateTime=2017-09-22 15:40:02</div><div class="line">    signatures=PackageSignatures&#123;d1f2c4 [8f445ad]&#125;</div><div class="line">    installPermissionsFixed=true installStatus=1</div><div class="line">    pkgFlags=[ HAS_CODE ALLOW_CLEAR_USER_DATA LARGE_HEAP ]</div><div class="line">    declared permissions:</div><div class="line">      getui.permission.GetuiService.com.jianshu.haruki: prot=normal, INSTALLED</div><div class="line">      com.jianshu.haruki.permission.MIPUSH_RECEIVE: prot=signature, INSTALLED</div><div class="line">      com.jianshu.haruki.permission.C2D_MESSAGE: prot=signature, INSTALLED</div><div class="line">    requested permissions:</div><div class="line">      android.permission.INTERNET</div><div class="line">      android.permission.WRITE_EXTERNAL_STORAGE</div><div class="line">      // 省略多行</div><div class="line">    install permissions:</div><div class="line">      com.jianshu.haruki.permission.C2D_MESSAGE: granted=true</div><div class="line">      com.google.android.c2dm.permission.RECEIVE: granted=true</div><div class="line">      android.permission.MANAGE_ACCOUNTS: granted=true</div><div class="line">      getui.permission.GetuiService.com.jianshu.haruki: granted=true</div><div class="line">      // 省略多行</div><div class="line">    User 0:  installed=true hidden=false stopped=false notLaunched=false enabled=0</div><div class="line">      gids=[3002, 3003, 3001]</div><div class="line">      runtime permissions:</div><div class="line">        android.permission.READ_EXTERNAL_STORAGE: granted=true</div><div class="line">        android.permission.READ_PHONE_STATE: granted=true</div><div class="line">        android.permission.WRITE_EXTERNAL_STORAGE: granted=true</div><div class="line">      disabledComponents:</div><div class="line">        com.huawei.android.pushagent.PushBootReceiver</div></pre></td></tr></table></figure></p>
<p>######练习五：<br>输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell dumpsys meminfo com.jianshu.haruki[此处写的是『简书』的应用包名]</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">Applications Memory Usage (kB):</div><div class="line">Uptime: 94384953 Realtime: 367426401</div><div class="line"></div><div class="line">** MEMINFO in pid 21291 [com.jianshu.haruki] **</div><div class="line">                   Pss  Private  Private  Swapped     Heap     Heap     Heap</div><div class="line">                 Total    Dirty    Clean    Dirty     Size    Alloc     Free</div><div class="line">                ------   ------   ------   ------   ------   ------   ------</div><div class="line">  Native Heap    20236    19432        0     1180    50580    48838     1741</div><div class="line">  Dalvik Heap    12299    12264        0       56    52530    45197     7333</div><div class="line"> Dalvik Other    23104    23064        0     9680                           </div><div class="line">        Stack     1484     1484        0        0                           </div><div class="line">       Ashmem      134      128        0        0                           </div><div class="line">      Gfx dev    14698    14596        0        0                           </div><div class="line">    Other dev       10        0        8        0                           </div><div class="line">     .so mmap     5924      252     4312     2908                           </div><div class="line">    .apk mmap    27189      144    26692        0                           </div><div class="line">    .ttf mmap      130        0      104        0                           </div><div class="line">    .dex mmap    12242       12    11060        0                           </div><div class="line">    .oat mmap     3661        0     1256        4                           </div><div class="line">    .art mmap     2450     1940       92      144                           </div><div class="line">   Other mmap     1300       12     1280        0                           </div><div class="line">   EGL mtrack    41280    41280        0        0                           </div><div class="line">      Unknown     6052     6044        0       84                           </div><div class="line">        TOTAL   172193   120652    44804    14056   103110    94035     9074</div><div class="line"> </div><div class="line"> App Summary</div><div class="line">                       Pss(KB)</div><div class="line">                        ------</div><div class="line">           Java Heap:    14296</div><div class="line">         Native Heap:    19432</div><div class="line">                Code:    43832</div><div class="line">               Stack:     1484</div><div class="line">            Graphics:    55876</div><div class="line">       Private Other:    30536</div><div class="line">              System:     6737</div><div class="line"> </div><div class="line">               TOTAL:   172193      TOTAL SWAP (KB):    14056</div><div class="line"> </div><div class="line"> Objects</div><div class="line">               Views:      837         ViewRootImpl:        1</div><div class="line">         AppContexts:        2           Activities:        1</div><div class="line">              Assets:        4        AssetManagers:        2</div><div class="line">       Local Binders:       31        Proxy Binders:       31</div><div class="line">       Parcel memory:       23         Parcel count:       92</div><div class="line">    Death Recipients:        1      OpenSSL Sockets:        2</div><div class="line"> </div><div class="line"> SQL</div><div class="line">         MEMORY_USED:     1054</div><div class="line">  PAGECACHE_OVERFLOW:      297          MALLOC_SIZE:       62</div><div class="line"> </div><div class="line"> DATABASES</div><div class="line">      pgsz     dbsz   Lookaside(b)          cache  Dbname</div><div class="line">         4       24             36       112/19/5  /data/user/0/com.jianshu.haruki/databases/com.jianshu.haruki</div><div class="line">         4       76            176      116/64/25  /data/user/0/com.jianshu.haruki/databases/google_app_measurement.db</div><div class="line">         4       40             33         6/21/5  /data/user/0/com.jianshu.haruki/databases/tencent_analysis.db</div><div class="line">         4       32             98       75/26/12  /data/user/0/com.jianshu.haruki/databases/bugly_db_</div><div class="line">         4       40             19         4/19/3  /data/user/0/com.jianshu.haruki/databases/pri_tencent_analysis.db</div><div class="line">         4       20             34         3/18/4  /data/user/0/com.jianshu.haruki/databases/ThrowalbeLog.db</div><div class="line">         4       20             32       786/19/5  /data/user/0/com.jianshu.haruki/databases/sharesdk.db</div><div class="line">         4      124             57       45/24/10  /data/user/0/com.jianshu.haruki/databases/jian_shu.db</div></pre></td></tr></table></figure></p>
<table>
<thead>
<tr>
<th>commond</th>
<th style="text-align:center">description</th>
</tr>
</thead>
<tbody>
<tr>
<td>adb shell dumpsys activity</td>
<td style="text-align:center">获取当前 Android 系统 Activity 栈中 Activity 信息</td>
</tr>
<tr>
<td>adb shell dumpsys activity top</td>
<td style="text-align:center">获取当前 Android 系统 中与用户交互的 Activity 的详细信息</td>
</tr>
<tr>
<td>adb shell dumpsys meminfo [应用包名]</td>
<td style="text-align:center">查看应用的内存使用情况</td>
</tr>
<tr>
<td>adb shell dumpsys package [应用报名]</td>
<td style="text-align:center">获取手机里面某个 apk 的应用信息、版本信息</td>
</tr>
<tr>
<td>adb shell dumpsys activity activities</td>
<td style="text-align:center">显示当前所有在运行的任务栈，并可查看栈中所有的 Activity 的列表</td>
</tr>
</tbody>
</table>
<p>参考链接：<br>官方文档，这里有比较详细的文档介绍： <a href="https://developer.android.com/studio/command-line/dumpsys.html" target="_blank" rel="external">https://developer.android.com/studio/command-line/dumpsys.html</a><br>开发必备—你应该知道的一些 ADB 命令 <a href="http://www.jianshu.com/p/0693b841c83b" target="_blank" rel="external">http://www.jianshu.com/p/0693b841c83b</a><br>dumpsys 命令用法 <a href="http://gityuan.com/2017/07/04/ams_dumpsys/" target="_blank" rel="external">http://gityuan.com/2017/07/04/ams_dumpsys/</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
            <category> adb shell dumpsys </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> shell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Android 启动前台服务，适配 vivo 与 OPPO 手机，第一期」]]></title>
      <url>/2017/09/18/%E3%80%8CAndroid%20%E5%90%AF%E5%8A%A8%E5%89%8D%E5%8F%B0%E6%9C%8D%E5%8A%A1%EF%BC%8C%E9%80%82%E9%85%8D%20vivo%20%E4%B8%8E%20OPPO%20%E6%89%8B%E6%9C%BA%EF%BC%8C%E7%AC%AC%E4%B8%80%E6%9C%9F%E3%80%8D/</url>
      <content type="html"><![CDATA[<h6 id="original-bad-mask-2017-09-18"><a href="#original-bad-mask-2017-09-18" class="headerlink" title="original bad-mask  2017-09-18"></a>original bad-mask  2017-09-18</h6><p><a href="http://www.jianshu.com/p/76af1e7503a5" target="_blank" rel="external">Android 启动前台服务，华为、小米、三星、OPPO、VIVO的配合程度接</a> 这是前文链接，我先甩在这里，上篇文章主要分析了几种品牌手机关于通知的配合程度，这篇文章先写第一期的解决方案，毕竟需求还是要跟版发布的～</p>
<p>因为测试的「华为 6.0」「华为 4.4.2」「小米6」「红米note 4X 6.0」「小米5.1.1」「三星手机 5.0.1」这几种机型可以正常开启前台服务，「vivo X9Plus 」「vivo X9 」「OPPO A59s」「OPPO R9s」不能开启前台服务，所以第一期先对 vivo 与 OPPO 做一个特殊的处理。</p>
<p>在 App 启动之后的适当时机，用下面这段代码<br>逻辑：判断是否是 vivo or OPPO 手机，如果是，再判断通知是否可用，如果不可用再弹出提示框引导用户进入设置界面。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (Build.MANUFACTURER.equals(<span class="string">"vivo"</span>) || Build.MANUFACTURER.equals(<span class="string">"OPPO"</span>))&#123;</div><div class="line">    <span class="keyword">if</span> (!NotificationUtils.isNotificationEnabled(<span class="keyword">this</span>))&#123;</div><div class="line">        <span class="comment">//未获得通知权限，此时把用户引向系统的设置界面，使用户手动打开通知权限</span></div><div class="line">        <span class="comment">//代码不上了，总之在这里谈提示框让用户打开设置界面就好了～</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>检测通知是否可用的方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SuppressLint</span>(<span class="string">"NewApi"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isNotificationEnabled</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">    AppOpsManager appOpsManager = (AppOpsManager) context.getSystemService(Context.APP_OPS_SERVICE);</div><div class="line">    ApplicationInfo applicationInfo = context.getApplicationInfo();</div><div class="line">    String pkg = context.getApplicationContext().getPackageName();</div><div class="line">    <span class="keyword">int</span> uid = applicationInfo.uid;</div><div class="line">    Class appOpsClass;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        appOpsClass = Class.forName(AppOpsManager.class.getName());</div><div class="line">        Method checkOpNoThrowMethod = appOpsClass.getMethod(<span class="string">"checkOpNoThrow"</span>, Integer.TYPE, Integer.TYPE, String.class);</div><div class="line">        Field opPostNotificationValue = appOpsClass.getDeclaredField(<span class="string">"OP_POST_NOTIFICATION"</span>);</div><div class="line">        <span class="keyword">int</span> value = (Integer) opPostNotificationValue.get(Integer.class);</div><div class="line">        <span class="keyword">return</span> ((Integer) checkOpNoThrowMethod.invoke(appOpsManager, value, uid, pkg) == AppOpsManager.MODE_ALLOWED);</div><div class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>开启通知服务的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 未发现不能执行「开启通知」操作的机型</div><div class="line"> * 能够进入「设置」页面的机型有：vivo X9 6.0系统 ／ vivo X9Plus 6.0系统 / OPPO R9s 6.0系统 / 华为ATH-TL00 6.0系统</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">toSettingPage</span><span class="params">(Context context)</span></span>&#123;</div><div class="line">    Intent intent = <span class="keyword">new</span> Intent();</div><div class="line">    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class="line">    <span class="keyword">if</span>(Build.VERSION.SDK_INT &gt;= <span class="number">9</span>)&#123;</div><div class="line">        intent.setAction(<span class="string">"android.settings.APPLICATION_DETAILS_SETTINGS"</span>);</div><div class="line">        intent.setData(Uri.fromParts(<span class="string">"package"</span>, context.getPackageName(), <span class="keyword">null</span>));</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(Build.VERSION.SDK_INT &lt;= <span class="number">8</span>)&#123;</div><div class="line">        intent.setAction(Intent.ACTION_VIEW);</div><div class="line">        intent.setClassName(<span class="string">"com.android.settings"</span>,<span class="string">"com.android.settings.InstalledAppDetails"</span>);</div><div class="line">        intent.putExtra(<span class="string">"com.android.settings.ApplicationPkgName"</span>, context.getPackageName());</div><div class="line">    &#125;</div><div class="line">    context.startActivity(intent);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>第一期先这样处理，然后继续调研～</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
            <category> Notification </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Notification </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android  Developer 的正确姿势之获得手机当前界面的 Activity 的名称]]></title>
      <url>/2017/09/17/Android%20%20Developer%20%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF%E4%B9%8B%E8%8E%B7%E5%BE%97%E6%89%8B%E6%9C%BA%E5%BD%93%E5%89%8D%E7%95%8C%E9%9D%A2%E7%9A%84%20Activity%20%E7%9A%84%E5%90%8D%E7%A7%B0/</url>
      <content type="html"><![CDATA[<h6 id="original-bad-mask-2017-09-16"><a href="#original-bad-mask-2017-09-16" class="headerlink" title="original bad-mask  2017-09-16"></a>original bad-mask  2017-09-16</h6><p>前文：<br>写这篇文章的初衷其实是这样的，最近想在用户启动 APP 时，引导用户进入系统的设置界面，于是我在网上看到了这段代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent();</div><div class="line">intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class="line"><span class="keyword">if</span>(Build.VERSION.SDK_INT &gt;= <span class="number">9</span>)&#123;</div><div class="line">     intent.setAction(<span class="string">"android.settings.APPLICATION_DETAILS_SETTINGS"</span>);</div><div class="line">     intent.setData(Uri.fromParts(<span class="string">"package"</span>, mContext.getPackageName(), <span class="keyword">null</span>));</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(Build.VERSION.SDK_INT &lt;= <span class="number">8</span>)&#123;</div><div class="line">     intent.setAction(Intent.ACTION_VIEW);</div><div class="line">     intent.setClassName(<span class="string">"com.android.settings"</span>,<span class="string">"com.android.settings.InstalledAppDetails"</span>);</div><div class="line">     intent.putExtra(<span class="string">"com.android.settings.ApplicationPkgName"</span>, mContext.getPackageName());</div><div class="line">&#125;</div><div class="line">startActivity(intent);</div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2644950-7d9b441aac350e0e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/200" alt="设置界面，这里以「微信」为例.png"></p>
<p>我很好奇为什么会在「intent.setClassName(“com.android.settings”,”com.android.settings.InstalledAppDetails”);」这段代码中这么写？同时又受到<a href="http://blog.csdn.net/perarther/article/details/54025042" target="_blank" rel="external">这篇文章</a>的启发，就想玩玩「adb shell dumpsys」命令，毕竟代码的一大禁忌就是「功能实现了，但是写的不明不白」～</p>
<h5 id="好了，正文来了"><a href="#好了，正文来了" class="headerlink" title="好了，正文来了"></a>好了，正文来了</h5><p> 注：下面所有的命令都需要在数据线连接手机的情况下进行，检测是否连接成功的最好方法就是看 Android Studio 的 「Connected Devices」是否正常显示了～</p>
<h6 id="捕捉当前的-activity-「即，当前通过-USB-连接电脑的手机的界面上显示『onResume』的-Activity-的信息」"><a href="#捕捉当前的-activity-「即，当前通过-USB-连接电脑的手机的界面上显示『onResume』的-Activity-的信息」" class="headerlink" title="捕捉当前的 activity 「即，当前通过 USB 连接电脑的手机的界面上显示『onResume』的 Activity 的信息」:"></a>捕捉当前的 activity 「即，当前通过 USB 连接电脑的手机的界面上显示『onResume』的 Activity 的信息」:</h6><p>在命令行窗口输入如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell dumpsys activity top</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">TASK null id=488</div><div class="line">  ACTIVITY com.android.settings/.applications.InstalledAppDetails 955e010 pid=13576</div><div class="line">    Local Activity d7e4b34 State:</div><div class="line">      mResumed=false mStopped=true mFinished=false</div><div class="line">      mChangingConfigurations=false</div><div class="line">      mCurrentConfig=&#123;1.0 460mcc2mnc en_US ldltr sw360dp w360dp h616dp 480dpi nrml long port finger -keyb/v/h -nav/h s.13 themeId=0, affectGlobal:true&#125;</div><div class="line">      mLoadersStarted=true</div><div class="line">      Active Fragments in 517189:</div><div class="line">        #0: InstalledAppDetails&#123;c3b458e #0 id=0x7f120256&#125;</div><div class="line">        「省略一堆代码」</div><div class="line">    ViewRoot:</div><div class="line">      mAdded=true mRemoved=false</div><div class="line">      mConsumeBatchedInputScheduled=false</div><div class="line">  「省略一些代码」</div><div class="line">    View Hierarchy:</div><div class="line">      com.android.internal.policy.PhoneWindow$DecorView&#123;fee7866 V.E...... R....... 0,0-1080,1920&#125;</div><div class="line">「省略大部分代码，这部分代码的主要说明内容当前的 Activity 的 View 的层级关系」</div><div class="line">    Looper (main, tid 1) &#123;6faf70a&#125;</div><div class="line">      (Total messages: 0, polling=false, quitting=false)</div></pre></td></tr></table></figure></p>
<p>其实最想知道的内容已经知道了<br>「 ACTIVITY com.android.settings/.applications.InstalledAppDetails」</p>
<p>写道这里其实应该结束了，但是你没有奇怪的地方吗？为毛「android.settings.APPLICATION_DETAILS_SETTINGS」这样写也可以？<br>哈哈，其实查看<a href="https://developer.android.com/reference/android/provider/Settings.html" target="_blank" rel="external">官方</a>可以看到如下说法：<br><img src="http://upload-images.jianshu.io/upload_images/2644950-8db38e2d4d112667.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/400" alt="官方网站截图.png"><br>再查看 android 的源码，看到了如下解释：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGS =</div><div class="line">           <span class="string">"android.settings.IGNORE_BATTERY_OPTIMIZATION_SETTINGS"</span>;</div></pre></td></tr></table></figure></p>
<p>哈哈，好像没有啥需要奇怪的了～</p>
<p>写到这里，其实真的应该结束了，不过却突然对 「adb shell dumpsys」命令有了兴趣，其实这篇文章也只是对 「adb shell dumpsys」命令有了一个引子的作用，下篇文章继续～～～</p>
<p>参考文章：<br><a href="http://blog.iderzheng.com/debug-activity-task-stack-with-adb-shell-dumpsys/" target="_blank" rel="external">使用adb shell dumpsys检测Android的Activity任务栈</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
            <category> adb shell dumpsys </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[读「象与骑象人」]]></title>
      <url>/2017/09/16/%E8%AF%BB%E3%80%8C%E8%B1%A1%E4%B8%8E%E9%AA%91%E8%B1%A1%E4%BA%BA%E3%80%8D/</url>
      <content type="html"><![CDATA[<h6 id="original-bad-mask-2017-09-16"><a href="#original-bad-mask-2017-09-16" class="headerlink" title="original bad-mask  2017-09-16"></a>original bad-mask  2017-09-16</h6><p>这是一本教人去找到幸福的书，如果这样子表述不完全正确，那么说这本书的大部分篇幅都是在教会我们去寻觅幸福。弗洛伊德曾说「生命中唯一重要的事情是爱情和工作」，其实这句话出现在这本大致可以称为寻找幸福的心理学书中并不奇怪，但是认同这个观点的并不是只有心理学家，在曾经读到过的一本商业书籍 – 麦肯锡方法，作者最后写道「当一切都失去的时候，家里要有一个人在等你。那样，至少你可以回家去洗衣服」。以前就特意背过这句话，现在读完这本书，好像确实是这样。生命中唯一重要的事情是爱情和工作。</p>
<p>这本书中，用通俗但有些不太准确的话来描述：「象」就是我们内心的感觉、本能反应、情绪和直觉；「骑象人」就是有意识的、控制后的思考。当大象与骑象人可以相互默契的配合时，那就是幸福了罢。</p>
<p>前两章是剖析人类心理的运作方式。「整个宇宙就是无止境的改变，你认为生命本身是什么，它就是什么」，这句话简单翻译下来，就是，发生在这个世界上的事情，只有通过我们自己对事件的诠释才能影响到我们，所以只要我们能控制自己对事件的诠释，就能控制自己的世界。书中从这段文字开始，试图让读者去找到自己不幸福的原因，进而让「骑象人」学会去掌控「大象」。讲到了掌控的方法，其中我最欣赏的「认知疗法」，就是根据人的认知过程，影响其情绪和行为的理论假设，通过认知和行为技术来改变求助者的不良认知，从而矫正并适应不良行为的心理治疗方法。也许，在我们与社会的交流中，慢慢接受并适当适应种种自认为不公的社会现象，这个过程中我们的心智也是在不断成长的，这也是一种「认知疗法」的运用了，因为我们在不断的接受自己曾经不能接受的内容。</p>
<p>知道了我们心理的运作方式，感知了内在，就该利用这种认知去提升与人相处的智慧。两个中心「互惠」和「道德虚伪」。「互惠」这部分引用了「影响力」书中关于克利须那协会的例子。不懂？那你想想那个路边先给你小扇子再让你扫码的人吧 … 「道德虚伪」这部分简单点描述，就是重视道德表象胜过道德真相。人们只有在被迫思考何谓公平，且发现自己作弊的情况下，才会放弃自利的行为。好了，我们已经知道，虚伪及乱下判断是重创人际关系的两大杀手，找出自己的过错，也是克服这两项恶习的关键所在。只要我们能找出自己眼中的梁木，就不会再那么受自身偏见所困，不会再那么爱说教，也不会再那么容易与人争论、与人冲突了。</p>
<p>剩下的部分就是帮助我们找到幸福，找到人生的意义。其中不可不提的就是教会我们认识困难、度过困难以完成心理的成长。一旦能挺身面对人生的挑战，便可激发自己原本潜藏的能力，而这些能力会改变我们原本对自己秉持的观念；逆境不仅仅让我们知道谁是酒肉朋友，谁是可以患难与共的好友，还会强化人际关系，让人们打开心扉；创伤会改变人生的优先顺序及对当下对他人的看法。想来一定是这样，因为我多出一个 10 月 5 号的纪念日，因为有高出只在象牙塔中待过的人的心智水平，因为有一张时刻提醒自己不能犯同样错误的脸，因为体验到自己与别人的差距，因为我有目前对生命意义的感知，所以感谢那段时间的炎凉，感谢当时的我，感谢现在的我。麦克亚当斯指出，所谓的人生故事就是，在时间的长河中，人从自己经历的无常变化中主观编出来的故事，没有这些人生无常、悲欢离合，我们是编不出精彩的人生故事的。</p>
<p>幸福之道在中庸。幸福不是我们能够直接找到、获得或实现的东西，必须先具备一定条件，然后再耐心等待。有些条件在自己本身，有些条件则在自己与其他事物间的关系：就跟植物需要阳光、水及土壤才能成长、繁茂一样，人需要爱与工作、全心投入，人也像蜂群一样，能从群体之中感受到超越自我的意义感。</p>
<p>值得时常念几遍的句子：<br>我们看得到比人身上的 7 个缺点，却看不到自己身上有 10 个缺点。<br>情商是指了解及节制自己的感觉与欲望的能力。一个情商高的人，其内心的骑象人必然技巧高超，懂得在不跟大象的意志直接起冲突的情况下，能富有技巧地分散大象的注意力，把大象安抚的服服帖帖。<br>没有人是孤岛，没有人能自全，每个人都是大陆的一小片，主体的一部分。<br>天将降大任于斯人也，必先苦其心志，劳其筋骨，饿其体肤，空乏其身，行拂乱其所为，所以动心忍性，增益其所不能。<br>上帝创造天使时，赋予他理智，却无感性；上帝创造野兽时，赋予它感性，却少了理智；只有创造人类时，使其兼具理智与感性。所以，人的理智一旦凌驾感性，他便超凡入圣，更胜天使；反之，人一旦感性凌驾理智，便禽兽不如。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2644950-eab62a8de8167362.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/200" alt="象与骑象人.png"></p>
]]></content>
      
        <categories>
            
            <category> 文艺路上的搬砖者 </category>
            
            <category> 象与骑象人 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 象与骑象人 </tag>
            
            <tag> 心理学 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Android 启动前台服务，华为、小米、三星、OPPO、VIVO的配合程度」]]></title>
      <url>/2017/09/14/%E3%80%8CAndroid%20%E5%90%AF%E5%8A%A8%E5%89%8D%E5%8F%B0%E6%9C%8D%E5%8A%A1%EF%BC%8C%E5%8D%8E%E4%B8%BA%E3%80%81%E5%B0%8F%E7%B1%B3%E3%80%81%E4%B8%89%E6%98%9F%E3%80%81OPPO%E3%80%81VIVO%E7%9A%84%E9%85%8D%E5%90%88%E7%A8%8B%E5%BA%A6%E3%80%8D/</url>
      <content type="html"><![CDATA[<h6 id="original-bad-mask-2017-09-09"><a href="#original-bad-mask-2017-09-09" class="headerlink" title="original bad-mask  2017-09-09"></a>original bad-mask  2017-09-09</h6><p>这两天接手了一个需求，就是尽量避免 App 被杀死，以保证推送的消息可以及时收到。在接手前，已经有同事做了各种调研，最后决定使用前台服务的方式以让用户对 App 正在运行的这种状态有一个明确的感知「这里说明下，有些 App 会尽量避免让用户明确感知到前台服务这种行为，也会启动前台服务，不过会利用 Android 系统的 bug，把这个前台服务再隐藏，这个方式在网上有很多介绍」。</p>
<p>用startForeground(int id, Notification notification) 方式来启动前台服务，代码并不多，在 AndroidManifest.xml 中再注册一个服务，在 Application 或者 Acitivity 启动即可，至于不同启动方式的利弊自己去查询下，我这个主要是看代码写完后，各种主要机型的配合程度。</p>
<p>让我吐槽一下，这个过程我的心情是这样的：懵『前台服务？启动方式？代码写好如何配合拉起推送的需求？』  — 好像懂了『都知道了，就差拿手机试一试了』 — 高兴『用自己的 华为手机尝试，success』— 失望 or 绝望 『自己的 VIVO、公司的 OPPO均失败，小米 success』— 美滋滋『看到 VIVO、OPPO 起来了前台服务，不过依然有难题… 』。</p>
<p>前台服务是否正常显示最好的对比方式就是看在此手机上的高德地图以及音乐播放器是否可以正常启动前台服务。</p>
<p>来段启动前台服务代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;!--私信的前台服务--&gt;</div><div class="line">&lt;service android:name=<span class="string">".push.MsgService"</span>/&gt;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MsgService</span> <span class="keyword">extends</span> <span class="title">Service</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">        Intent notificationIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MsgChatHistoryActivity.class);</div><div class="line">        PendingIntent pendingIntent = PendingIntent.getActivity(<span class="keyword">this</span>,<span class="number">0</span>,notificationIntent,<span class="number">0</span>);</div><div class="line">        Notification.Builder builder = <span class="keyword">new</span> Notification.Builder(<span class="keyword">this</span>.getApplicationContext());</div><div class="line">        builder.setContentTitle(<span class="string">"***服务"</span>);</div><div class="line">        builder.setContentText(<span class="string">"请勿关闭，***"</span>);</div><div class="line">        builder.setSmallIcon(R.drawable.gengmei_icon);</div><div class="line">        builder.setContentIntent(pendingIntent);</div><div class="line">        Notification notification = builder.getNotification();</div><div class="line">        startForeground(<span class="number">1</span>,notification);<span class="comment">//启动前台服务</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 当Service因为内存不足而被系统kill后，接下来未来的某个时间内，当系统内存足够可用的情况下，系统将会尝试重新创建此Service，</div><div class="line">         * 一旦创建成功后将回调onStartCommand(...)方法，但其中的Intent将是null，pendingintent除外</div><div class="line">         * 返回值可以确定下，用哪个符合要求</div><div class="line">         */</div><div class="line">        <span class="keyword">return</span> START_STICKY;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        stopForeground(<span class="keyword">true</span>);<span class="comment">//停止前台服务</span></div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//启动服务</span></div><div class="line"> startService(<span class="keyword">new</span> Intent(mContext,MsgService.class));</div></pre></td></tr></table></figure>
<p>#####下面展示下这段代码在几种主流手机上的运行效果：</p>
<p>######小米手机：<br>小米6、红米note 4X 6.0、小米5.1.1 可以启动前台服务，且不能撤销；「大概可以得出结论：小米手机可以正常启动前台服务，且均不能撤销，除非自己去设置中单独对 App 进行设置，但是一般的用户不会有这种操作，可以先不用考虑」</p>
<p>######三星手机：<br>三星手机 5.0.1 系统可以正常启动；</p>
<p>######华为手机：<br>华为6.0「默认不会展开『拒绝』『允许』的选择框」、4.4.2「默认会展开『拒绝』『允许』的选择框」会有拒绝接受通知的情况，上两张图说明下；「拒绝后，除非用户手动去设置中对 App 单独设置，否则不能再次开启，高德也是这样的」<br>对比下小米，发现好喜欢小米，因为小米在通知界面中根本就没有「拒绝」「接受」的选择框，有效避免了用户的这种「拒绝」的行为…</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2644950-ce27d6e9370e2023.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/400" alt="默认没有展开「拒绝」「接手」的选择框，但是下滑可以显示.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2644950-97deb550b675407c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/400" alt="默认展开，如果此时用户点击拒绝，那么开发者表示收到一万点伤害.png"></p>
<p>######VIVO、OPPO手机：<br>vivo X9Plus 、vivo X9 不能启动前台服务；「音乐播放器、高德可以启动前台服务」</p>
<p>OPPO A59s 5.1版本 、OPPO R9s  不能启动前台服务；「音乐播放器、高德地图均不能启动前台服务」</p>
<p>这两种机型去网上查，Google 的结果简直就是让人想哭，要么不能准确定位问题，要么不能准确定位机型，更是让我查到这样的句子：vivo和oppo的手机上service基本无法常驻，死的一干二净明明白白，丝毫没有任何挣扎的痕迹，难道是我查的姿势不对？「不过确实没有做过单独的某个机型的适配，不知道查某种机型的正确姿势，待我找到后，再写一篇博客，哈哈…」</p>
<p>查了半天无果，OPPO 放到一边不谈，但是 VIVO 中 高德确实启动了前台服务，我开始倒腾看手机到底有没有相关的设置，难道真的像网上说的OPPO等手机从根本上就拒绝了前台服务这种行为？姑娘并不想相信这个事实…</p>
<p> 在 VIVO 中，高德安装后默认启动通知服务，不需要手动设置；但是，我目前的代码没能让 VIVO 手机默认启动  App  通知服务，手动设置后，可以正常启动前台服务，所以下一步的任务就是找到让 VIVO 手机默认启动 App 通知服务的正确姿势，高德做到了所以一定有办法…</p>
<p> 在 OPPO 中，高德安装后默认没有启动  App  通知服务，需要手动设置；我目前的代码也没能让 OPPO 手机默认启动通知服务，手动设置后，倒是可以正常启动前台服务。目前来看已经打破了这个论断：OPPO等手机上从根本上就拒绝了前台服务这种行为。所以下一步的任务就是找到让OPPO 手机默认启动 App 通知服务的正确姿势，高德没做到所以有点怂，不过可以试一试…</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">在 VIVO X9Plus手机上手动设置的方式：</div><div class="line">Settings -- More settings -- Applications -- All -- 目标 App -- Notifications -- 打开 Allow notification</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">在 OPPO R9s 手机上手动设置的方式：</div><div class="line">设置 -- 其他设置 -- 应用程序管理 -- 已安装 -- 目标 App --通知管理 -- 打开 「允许通知」</div></pre></td></tr></table></figure>
<p>######再来一波链接：<br><a href="http://www.jianshu.com/p/5505390503fa" target="_blank" rel="external">前台服务的使用</a><br><a href="http://www.jianshu.com/p/1e49e93c3ec8" target="_blank" rel="external">Service那点事儿</a><br><a href="http://www.jianshu.com/p/06a1a434e057" target="_blank" rel="external">Android如何降低service被杀死概率</a><br><a href="https://stackoverflow.com/questions/6397754/android-implementing-startforeground-for-a-service" target="_blank" rel="external">Android 如何开启前台服务</a><br><a href="https://github.com/commonsguy/cw-omnibus/tree/master/Notifications/Foreground" target="_blank" rel="external">GitHub 上的 Demo</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
            <category> Notification </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Notification </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[他们在争吵]]></title>
      <url>/2017/09/14/%E4%BB%96%E4%BB%AC%E5%9C%A8%E4%BA%89%E5%90%B5/</url>
      <content type="html"><![CDATA[<h6 id="original-bad-mask-2017-08-29"><a href="#original-bad-mask-2017-08-29" class="headerlink" title="original bad-mask  2017-08-29"></a>original bad-mask  2017-08-29</h6><p>我有缺陷，不过我也努力的在弥补。</p>
<p>弥补的第一种方式就是读书。那个时候我总是天真的以为，我读的多了，总有一天我能对某件事情观点鲜明地侃侃而谈。直到现在，发现读的越多，越不想去在人面前「侃侃而谈」，因为以我的经历和修养，说出来的内容只不过是娱乐大众而已，最终发现，被娱乐的终究只是自己。我很欣赏能够随手一挥就是一段文字或者一个章节的人，当我尝试什么都不拿坐在电脑前，想去写一些什么的时候，我发现，好几本书中零零碎碎的观点在我的脑海中交织，他们争执着要蹦到我的电脑屏幕上，而我却不知道怎么按下手中的键盘，我尝试不去干扰他们的争执，而是静心等待，等待哪个可以胜出然后自己出现在屏幕上的一刻，却突然觉得自己像个傻子，难不成观点还会自己打字到屏幕上吗？</p>
<p>弥补的第二种方式就是学习、加班。在认为自己还精力充沛的时候，我每天都尽量把自己的时间填满，不知道你们会不会觉得可笑，我会规定自己从 A 时间段到 B 时间段的事情，从 B 时间段到 C 时间段的事情，等到深夜，看着自己完成的任务列表，又对着镜子看看自己的眼睛，告诉自己「力尹，加油，你不累你不累你不累，很开心很开心很开心」。在不想受约束的时候，我会想放纵，开始以为自己能从放纵中找到快乐，后来发现那只是以为。因为事后我总会不自觉的对自己的这段时间花费打分，基本都是分数很低，悔过的程度是他人无法体会的，所以我又默默告诫「力尹，你这样做不对，不该这样」。</p>
<p>就这样，时间久了，确实可以进步的比一些人快些，同时也会被自己的强计划性而压迫。当一些不在计划内的事情发生的时候，脑中「强计划性」与「非计划内的事情」会相互排斥，对于「非计划内的事情」越是在意，「强计划性」的大脑越是批评你。很多情况下，你有能力去平静自己的内心，但是这次不行。因为他是「爱情」。</p>
<p>什么时候开始？我不知道。什么时候确定？我不知道。为什么？我不知道。后来，他说他有女朋友，我不开心，我尝试交男朋友不刻意理他，嗯，两个月不到，我交了 3 个男朋友，在过程中我不断的劝自己放弃他，嗯，我没有做到。最终结果是什么？我更喜欢他了。我悄悄的关注，悄悄的寻找他世界里我的影子，可是我越来越不自信，因为我找不到。努力维护的自尊不准我做的更多。「强计划性」的大脑批评我「不务正业」，内心却也找不到答案，我很焦灼，我真的要放弃了。大脑也要求我放弃他，作为惩罚，我决定放弃我自认为的「爱情」。</p>
<p>可能是幸运，我决定放弃的时候，他来了。我觉得他好像真的用他所有能想到的方式来爱我。我也很努力的探寻到他的内心，很努力的思索他的语言和文字。我就像一个天真的孩子，一脚出去是阳光，一脚出去是雨天，而控制的阀门的人却是他不是我，我安慰自己要磨合，我还要找到自己。可是他同时是「非计划内的事情」，这段时间「强计划性」的大脑总来控制我，因为大脑认为我永远不会真正爱上一个人。就这样，我有了两个任务：他和我要磨合；「非计划内的事情」与「强计划性」的大脑要磨合。其实我知道，这是无法逃避的事情。</p>
<p>也许，我会找到解决的方式。</p>
<p>佛洛伊德说：生命中唯一重要的事情是爱情和工作。我们可以换一个稍微商业化的书，在「麦肯锡方法」这本管理学书籍中，最后写着：当一切都失去的时候，家里要有一个人在等你。那样，至少你可以回家去洗衣服。</p>
<p>他是爱情，我需要工作。迷失于爱情，我会难过；迷失于工作，我会伤心。我不能伤害任何一个，就像我不能去伤害自己。</p>
<p>我应该可以找到解决方式。调节这段争吵。我能不能调节好，我不知道。如果，抬头，发现是他，我会很开心。</p>
<p>早就写好，今天还是觉得要放在简书里。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2644950-0a486a2b4bead0b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/200" alt="image.png"></p>
]]></content>
      
        <categories>
            
            <category> 内心独白 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[读「自在独行」]]></title>
      <url>/2017/08/29/%E8%AF%BB%E3%80%8C%E8%87%AA%E5%9C%A8%E7%8B%AC%E8%A1%8C%E3%80%8D/</url>
      <content type="html"><![CDATA[<h6 id="original-bad-mask-2017-08-19"><a href="#original-bad-mask-2017-08-19" class="headerlink" title="original bad-mask  2017-08-19"></a>original bad-mask  2017-08-19</h6><p>记于读到作者夸赞自己妈妈时<br>那日，我和妈妈说有男朋友了，之前就和我妈妈提过他，不过那时觉得他该不会喜欢我，所以没有细说，只说了他是河南的。所以，后来告诉妈妈他成为了我的男朋友，妈妈许是很害怕，害怕失去我「毕竟那个地方对她一个母亲来说太远了」，愣了一会，之后直说，我相信你的判断力。<br>爸爸也没有问太多，只是说，你好不容易遇上你喜欢的人，要好好珍惜。<br>被爸爸妈妈对我的信任感到震惊，也许只是曾经讨论过所谓的恋爱观被他们接受了，也许他们真的爱我爱到愿意牺牲自己的女儿以换取我梦想的幸福。</p>
<p>想于雨落后的早晨<br>不知为什么，许是我成长了，许是有烦恼了，雨的声音竟能把十分疲乏的我喊醒。总觉得有人叫我，所以我凌晨两点多起来趴在床券，打开窗，伸手去摸了一下似乎要把地面撕裂的雨，固执的冲向地面的雨应该没想到竟被我的手接住。我也是开心，心想着我为大地拦住了一根雨。<br>太乏累，也许是被困意叫回床上，也许是被第二天的工作叫回床上，但是躺下后竟睡不着，难道我在怕雨的声音？<br>我把睡在我身边的同学叫醒，就为了枕着她的胳膊睡觉，枕上后却怕压疼她，终是不忍，又躺会我那窄窄的硬床边沿，只有一个被子，竟硬生生的睡着了。</p>
<p>记于地铁早高峰<br>我一定是幸运的，用自己不高的工资租住在距离公司走路十分钟的住处。弹性的工作时间想必也给其他同事有了避开地铁早高峰的机会。书中说蹲在角落看人，我不知道作者看的是什么，想必作者可以通过一个人的举止了解到其内在，当我效仿的时候，我发现自己和一些人的差异，我竟然想强迫别人拥有我的思想，按照我的想法做事情，我也意识到这样的想法是不对的，但是接受不了利用早起挤地铁的时间来斗地主的做法。</p>
<p>记于地铁晚高峰<br>其实每每读完一本书，我都想写点什么，可是总是纠结于抓不到这本书的「中心思想」，我自己也很疑惑，我想应该是读书太少，不能融会贯通。但是自己又不甘心，所以在地铁上又拿出书来读第二遍，读第一部分「纺车声声」竟把自己读哭了，目不识丁的母亲坚守着自己的丈夫，独自支撑起这个家庭，面对似乎是无法解决的困难时，也要让自己的几个孩子读书，我也为作者的早熟哭泣，作者懂事这么早，会不会也很累？洞察人性这么准，会不会心很凉？</p>
<p>抄书<br>世上的事，认真不对，不认真更不对，执着不对，一切视作空也不对，平平常常，自自然然，如上山拜佛，见佛像了就磕头，磕了头，佛像还是佛像，你还是你 — 生活之累就该少下来了。</p>
<p>男人是征服世界而存在的，女人是征服男人而存在的，而征服男人的是女人的美，美是男人对女人的作用的限定而甘愿受征服的。「也许你不认同的，那你需要成为一个雌雄同体，至少是性格上」</p>
<p>漂亮是美的表，端庄是美的质。以自我而活，活有个性，活有热情，这就是常活常新。</p>
<p>群居守口，独坐防心。</p>
<p>你一定很奇怪，但是我想的，到这里就没有了。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2644950-16f14e607e7040bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/200" alt="image.png"></p>
]]></content>
      
        <categories>
            
            <category> 文艺路上的搬砖者 </category>
            
            <category> 自在独行 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 人性 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[读「月亮和六便士」]]></title>
      <url>/2017/07/31/%E8%AF%BB%E3%80%8C%E6%9C%88%E4%BA%AE%E5%92%8C%E5%85%AD%E4%BE%BF%E5%A3%AB%E3%80%8D/</url>
      <content type="html"><![CDATA[<h6 id="original-bad-mask-2017-07-31"><a href="#original-bad-mask-2017-07-31" class="headerlink" title="original bad-mask  2017-07-31"></a>original bad-mask  2017-07-31</h6><p>讽刺。<br>读完之后的感觉就是讽刺了种种人性，同情剧中的角色，但是想一下，突然发现自己也是被自己同情的对象，想去扩散给身边人却难以启齿。发现自己读的很多书，直接探测到了人性，我以为我会因此变的真正的成熟，因为我听说，真正的成熟不是冷漠，而是温柔，对整个世界都温柔。但是我发现我逐渐了解到了人性，但是我却没有心智去让自己变的真正成熟，反而是一种痛苦、伤心。我以为我不去在乎与人之间的纷争、小事，大家就可以一起大度，但是有时候这让人看来是可以毫无理由侵占你的资本。当我努力去顺着他们激起的怒火，争取蝇头小利「或许也只是让自己少吃点亏，试图品尝人间烟火」，我开始鄙视自己。我讨厌这种让我犹豫，左右为难的处境。或许我还是没有把握好「争与不争的分寸」。所以如果你是那种我一松手、一推开就走的人，那么就快点消失，否则拿捏分寸对我来说太残忍。</p>
<p>一本书或者说一篇文章，大部分的情况下，总是需要几个人来串演一下，不然中心怎么会出来呢？就比如 … </p>
<p>斯特里克兰太太，最大的悲哀应该就是成为了斯特里克兰太太，最大的幸运可能也是。在确切知道自己的丈夫只是为了画画而选择离开家庭、远走他乡的事实后，依然在向外界传递一种「丈夫是因为新的爱情所以才跑掉」的错觉，这种错觉她迷惑了外界，但是不能迷惑自己。她无法想象、理解「四十岁的人为了成为画家抛妻弃子」，不想承认自己的失败，也不想承认自己从来没有真正理解过丈夫的心。这样，她就坐稳了被伤害的宝座，别人对她必须给予更多的同情。没错，这样会利于她保持自己的声望，让她更好的谋生，更好的抚养孩子，她充分利用了所有可以利用的条件，也许，在那个时代，她已经是一位女强人了。但是，是不幸福的残缺女强人，不过表面上她光鲜、靓丽 …<br>所以，她在不知道她的丈夫和其他女人有了孩子的情况下，住在出版商寄来丈夫仿作装饰的房子里，以斯特里克兰太太的身份，安静从容的接受别人的采访，只为了成全采访者想要多了解斯特里克兰的要求。</p>
<p>斯特罗夫先生，一个被商家找上门却在努力向商家推销别人画作的画家。他善良，善良到在「正常人」看来没有自尊心的程度。他说「我觉得如果你谈恋爱的时候还讲自尊心，那原因只有一个，其实你最爱的是你自己」。他认为「男人结婚之后出轨是很常见的事情，等他玩够了，他就会回到他的妻子身边，而他的妻子就会接受他回家，大家都认为这种事情很正常。女人为什么不能像男人这样呢」。所以他祈求背叛她的妻子回到他的身边。妻子背叛他而去追寻的对象是斯特罗夫极力帮助的人。怎么样，是不是很「善良」？「他生性和蔼大方，却总是好心办错事；他对美丽的事物有真挚的感情，却只能创造出平庸的东西；他的感情特别细腻，举止却是那么粗鲁。造化开的这个玩笑真实残忍，居然给他灌注了这么多自相矛盾的性格特征，还让他独自面对这个冷酷得让他迷惑的宇宙。」</p>
<p>斯特里克兰，就是斯特罗夫极力帮助的人。他的心里有一种热望，如果有什么东西阻碍了他心里的那种令人难以理解的热望，那种催促他走向某个连他自己也不知道的目标的热望，他会毫不犹豫地将这种东西从心里连根拔起，哪怕为此弄得苦恼不堪、遍体鳞伤他也在所不惜。所以他离开了他的太太，只为成为一个画家。他讥笑所有世俗，讽刺努力帮助他的斯特罗夫先生，带走了斯特罗夫太太。他对他犯下的罪行供认不讳，所以无话可说。可是，他是伟大的画家，就是那种生时潦倒，死后被后世追捧的画家。他如果知道当时为了抵 200 法郎债务而送出的画，在与储物间的杂物待了很久后的画作，现在拍出 200 万法郎，会怎么样呢？</p>
<p>文中说，</p>
<p>作家追求的回报应该是挥洒文字的快乐和传播思想的惬意，至于其他的，那就随便吧，别去在意赞美或诋毁、失败或成功。</p>
<p>我明白循规蹈矩未必不是幸福。但血气方刚的我想踏上更为狂野不羁的旅途。我认为我应该提防这些安逸的欢乐。我心里渴望过上更危险的生活。我随时愿意奔赴陡峭险峻的山岭和暗流汹涌的海滩，只要我能拥有改变 — 改变和意料之外的食物带来的刺激。</p>
<p>如果罪人对他犯下的罪行直认不讳，想劝他洗心革面的人还能有什么话说呢？我没有这方面的经验，因为我自己做错事之后总是矢口否认一切。</p>
<p>痛苦使人高尚这种说法并不符合事实，幸福偶尔会使人高尚，但至于痛苦，在大多数情况下，只会使人卑鄙和恶毒。</p>
<p>有时候人们戴的面具太过完美，日久天长之后，他们也就真的变成他们假扮的那个人。「所以，badmask」</p>
<p>这段时间，因为对自己在很多情况下的沟通效果不满意，好好的反省了下，证明你聪明的方式，其实有时候就是笨一点，虚伪并不意味着就是贬义词。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2644950-7208f3d9d832c0e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/200" alt="月亮和六便士.png"></p>
]]></content>
      
        <categories>
            
            <category> 文艺路上的搬砖者 </category>
            
            <category> 月亮和六便士 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 月亮和六便士 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[读「把时间当作朋友」]]></title>
      <url>/2017/07/22/%E8%AF%BB%E3%80%8C%E6%8A%8A%E6%97%B6%E9%97%B4%E5%BD%93%E4%BD%9C%E6%9C%8B%E5%8F%8B%E3%80%8D/</url>
      <content type="html"><![CDATA[<h6 id="original-bad-mask-2017-07-22"><a href="#original-bad-mask-2017-07-22" class="headerlink" title="original bad-mask  2017-07-22"></a>original bad-mask  2017-07-22</h6><p>醒悟：<br>你的大脑并不是你，你的大脑是 (属于) “你的”大脑。<br>如果我们能用自己的大脑控制自己的大脑，那么我们就应该用自己的大脑控制自己的大脑 — 事实上，这恰恰是人类与猩猩的区别，尽管人类和猩猩拥有共同的祖先。举例：今天想偷懒不去健身房，那不过是你的大脑的想法，而不应该是你的想法。<br>…everything can be taken from a man but one thing : the last of the human freedoms — to choose one’s attitude in any given set of circumstances, to choose one’s way.<br>也许，我们可以「运用心智获得解救」。不再让自己跟着感觉走，成为大脑的奴隶，而是翻身做大脑的主人。</p>
<p>一个人的心智就是过往获得的一切知识及经验的总和「包括基于这些知识和经验造就的思考方法、思考模式」。<br>学习的方式有多种：体验、试错、观察「他人亡羊我补牢实在是一个聪明的选择」、阅读。<br>知道经验局限其实挺重要的。<br>人类也许是地球上最尴尬的物种：长期的进化是人类到达了今天的高度，但是每个人在出生的那一刹那，居然与其他动物站在几乎同样的起点上，心智到从零开始进化。这段读完突然想到在「人类简史」中对「仓促的地位跳跃」的描述。<br>实践能力是自学能力最终转化为真正价值的根本。<br>写作能力并不一定是写小说、剧本的能力，最基本的一种 — 写出简洁、有效、准确、朴素、具体的说明行和说理性文章的能力。</p>
<p>因果关系可以从 3 个层面去审视：<br>    A 不一定是 B 的理由；<br>    A 不一定是 B 唯一的理由；<br>    A 不一定是 B 最重要的理由。<br>你可以自己去了解下「双盲测试」，这个不好说，而且我也不想打字了…<br>思维缜密可以这样练习 — 在至少连续 6 个月的时间里，时时刻刻注意自己的活着自己被灌输的每一个念头，甄别其中的因果关系。<br>所谓情商，是思考能力问题而已。<br>「哪一个更合理、更现实就接受哪一个」比「那一个更积极就接受哪一个」聪明多了。<br>你该知道「道理」与「感悟」之间的巨大差异。所以沟通时，你我都改注意的。<br>总有那么一刻，我们的勇气不能低于我们的恐惧。所以，我们有什么理由不能理解别人的恐惧呢？</p>
<p>在倾听的过程中，我们可以利用多余的脑力处理两个方向的信息：回顾与预期。<br>比「知道什么话能说，什么话不能说」更重要的是「通过努力、通过积累称为能说更多话的人」。<br>争论或者讨论的是「事实」，不是「看法」。<br>读书其实不见得一定要有目的，随意闲翻，同样有益。</p>
<p>往往不是有兴趣才做的，而是做好了才有兴趣。<br>痛苦就是这样。一旦我们在痛苦出现的时候运用心智把自己的注意力转移到其他地方去，痛苦就几近自动消失，而且在它被我们重新注意之前绝不会回来。<br>所谓幸运，就是当你准备好的时候机会来了。<br>Lucy is what happens when preparation meets opportunity.<br>承认自己能力有限，是保持心里健康的前提。<br>真正的关系最终只有一种表现：为某人某事心甘情愿的花费时间，哪怕「浪费」时间。<br>学会独善其身，以不给他人制造麻烦为美德，用自己的独立赢得尊重。<br>在自己的语言中，把「优点」和「缺点」这两个词，替换成「特点」，也许你就很容易做到平静对待自己的各种特点，也平静对待他人的各种特点了。<br>选择以为着放弃。<br>尽量不要减少与家人交流的时间。这方面我应该是合格的吧，因为我一周七天几乎六天会和家里人视频聊几句…</p>
<p>愿我能从容接受我不能改变的，<br>敢于改变我可以改变的，<br>并赐予我智慧去分辨这两者间的区别。<br>能够登上金字塔顶端的只有两种动物，一种是雄鹰，一种是蜗牛。</p>
<p>现实：<br>我有不足，我需要时间，我没办法一蹴而就。<br>做出截然相反决定的理由竟然是一模一样的。你不信？我举个简单例子，不论学科种类的读书，因为不知道会在什么时候有用，甚至不知道会不会有用，但是有的人就因为这样决定读了，有的人也因为这样决定不读了。<br>接受现实才是最优策略 — 有什么做什么，有什么用什么；做什么都做好，用什么都用好。<br>其实，快乐是一种本事。<br> 世界上的资源分布其实是服从正态分布曲线的。又解：世界上的资源并非是分配不公，只是分配不均。<br>我们必须接受「现状无法马上摆脱」、「速成绝无可能」、「完美永不存在」、「未知永远存在」、「只有付出才有收获」。<br>时间的行动只有一个，那就是自顾自地流逝。<br>在做任务划分是，区分紧急、重要时，要注意区分哪些属于显得紧急、显得重要。<br>我们不是计划着去失败，而是失败地计划。<br>人类的发展史就是极少数想明白了的人不停挣扎的同时，被绝大多数想不明白的人谩骂、侮辱、陷害、谋杀的历史。<br>独立思考「Cirtical Thinking」，只不过是从别人那里知道一个结论的时候，自己动脑重新推演一遍，看看得出结论的过程又没有漏洞和不合理的地方，衡量一下结论到底有没有道理的过程。<br>Most people would die sooner than think — in face they do so.</p>
<p>其实：<br>长期计划时需要通过时间才能习得的能力。你如果目前不能坚持自己的长期计划，那么把计划时长缩短到一天，你也可以出色的完成计划了。慢慢延长到一周，两周…<br>优秀的领导，能够把人们带到他们想去的地方；而卓越的领导，能够把人们带到他们应该去但是没想过要去的地方。<br>A leader takes people where they want to go. A greater leader takes people where they don’t necessarily want to go, but ought to be.</p>
<p>自主、独立是心智成熟的人必有的素质。<br>不因其他人的错误而耽误自己的时间。<br>逃避责任就会带来轻松，可那恰恰是「生命中不能承受之轻」。ps.这本书很早大概是三年前读过，好像是一个解读版本，差不多全忘了，看来要再买原版了。<br>基于过程的记录要比基于结果的记录更为详尽。另外一个优势就是 — 结果不傲的时候更容易找到缘由。时间日志可以再次走起了，想想大学时用本子记录自己的时间支配，考研失败后就把这个习惯扔了，看来可以拿起来了。</p>
<p>common sense 「可能形容不妥，可以说『了解并不吃亏的』知识」:<br>墨菲定律：凡事只要可能出错，就会出错。<br>侯世达法则：完成一个任务实际花费的时间总会超过计划花费的时间，就算制定计划的时候考虑到本法则，也不能避免这种情况的发生。<br>黄金分割律「Golden ratio」：一条线分割成两段，总长度 a+b 与长度较长的 a 之比等于 a 与长度较短的 b 之比。应用时一般取 0.618 或者 1.618 。 </p>
<p>读这本书，需要自己去执行的内容太多，我需要仔细理解的部分太多，前前后后加起来的时间有两个全天的时间，受益匪浅。我被李笑来先生巨大的阅读量折服了，而他却一直自称「资质平平」。</p>
<p>运用心智，把时间当作朋友。</p>
<p>其实以上 90% 的内容都是我看完书，都从头到尾翻了一遍自己加笔记的地方整理的，大部分都是摘抄内容后加了一些边角的词语进去，写这些内容只是巩固，因为知道自己资质平庸。如果你没有听过这本书，还很幸运让你对则本书有兴趣了，不管是买来还是借来读一读，我会很高兴。</p>
<p>结尾的时候，要不要来个笑话。这本书明确提出「时间不可管理」，但是要是想不出好的分类名字，可以把它归在「时间管理」类的书籍中。前两天听 TED，一个颇有学识的妈妈正好在分享时间管理方面的经验，她在其中说到自己在一次时间管理的课程中迟到了。你呢？</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2644950-d1fa4226743b87d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/200" alt="image.png"></p>
]]></content>
      
        <categories>
            
            <category> 文艺路上的搬砖者 </category>
            
            <category> 把时间当作朋友 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 时间不可管理 </tag>
            
            <tag> 运用心智 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[读「岛上书店」]]></title>
      <url>/2017/07/02/%E8%AF%BB%E3%80%8C%E5%B2%9B%E4%B8%8A%E4%B9%A6%E5%BA%97%E3%80%8D/</url>
      <content type="html"><![CDATA[<h6 id="original-bad-mask-2017-07-02"><a href="#original-bad-mask-2017-07-02" class="headerlink" title="original bad-mask  2017-07-02"></a>original bad-mask  2017-07-02</h6><p>一件事，让一个人决定抛弃世界。<br>一件事，让一个人慢慢爱上世界。<br>书，始终作为一个合理的中介，连接着一个人和一件事。</p>
<p>当 A.J. 认识到自己爱上这个捡来的「女儿」，决心做她父亲的时候说，「一旦一个人在乎一件事，就发现自己不得不开始在乎一切事」。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">没有人会漫无目的的旅行，那些迷路者是希望迷路。</div></pre></td></tr></table></figure></p>
<p>「玛雅知道她的妈妈把她留在小岛书店，但是也许每个小孩在某个岁数都会遇到这种事。有些孩子被留在鞋店，有些被留在玩具店，还有些被留在三明治店。你的整个人生都取决于你被留在什么店里。她可不想生活在三明治店。」当我读到这里，再联想一下 6 月 30 号晚上看到被战争伤害后的孩子，那么小就认为人生已经被决定处于什么境地，真的有些残忍。</p>
<p>当 A.J. 离开世界，阿米莉亚要对玛雅负责，兰比亚斯接手了书店，嗯，在一个商业中心且电子阅读器已经盛行的时候，他接手了书店。他说，「没有书店的地方算不上是个地方，伊西」。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">没有谁是一座孤岛。</div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2644950-b49b9900a884610c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/200" alt="image.png"></p>
]]></content>
      
        <categories>
            
            <category> 文艺路上的搬砖者 </category>
            
            <category> 岛上书店 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 岛上书店 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[听「锤子科技产品总监 -- 朱萧木的交流分享」]]></title>
      <url>/2017/06/28/%E9%94%A4%E5%AD%90%E7%A7%91%E6%8A%80%E4%BA%A7%E5%93%81%E6%80%BB%E7%9B%91%20--%20%E6%9C%B1%E8%90%A7%E6%9C%A8%E7%9A%84%E4%BA%A4%E6%B5%81%E5%88%86%E4%BA%AB/</url>
      <content type="html"><![CDATA[<h6 id="original-bad-mask-2017-06-28"><a href="#original-bad-mask-2017-06-28" class="headerlink" title="original bad-mask  2017-06-28"></a>original bad-mask  2017-06-28</h6><p>晚上七点半，小小的会议室里挤满了公司的产品经理，不免多了几个像运营、商务、码农等身份的人去凑凑热闹，当然，对于我这种对只要有演讲就特别兴奋的人来说，必去不可。</p>
<p>对于锤子，大家早就听惯了「情怀」这个字眼。确实，听完朱萧木的整体交流分享后，我很感动。对于手机系统设计，不论是「用户体验」还是「创意抨击终成产品」，我都不了解。我承认我很矛盾，整体听下来，对一些设计我认为有些小多余，可是我当场没有足够的事实去反驳他，因为这些功能仔细想想好像挺有用，再仔细想想好像很多余，但是我就是很感动。</p>
<p>在他前期表述的过程中，我仔细分析着在很多人面前去分享点什么有用的东西的时候，怎样表述，怎样适当的体现小幽默，怎样以合适的方式讲出你认同的东西，并且获得别人的认同。然后，我很羡慕。想了想自己对自己曾经的承诺，又看了看现在自己的状态「与他简单的谈两句提几个我的问题都让我有点怂」，始终在寻找目前的工作与想要做的事情「喜欢演讲」的一个平衡点，探索差距，找到方向，为之投入，也许是我应该做的事情。</p>
<p>对了，最近可能要买个锤子手机了。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2644950-05c1a9564f5ee682.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/200" alt="分享图"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2644950-f5f0ec3f15a09e7a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/200" alt="分享图"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2644950-77ddbf91611fcf8e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/200" alt="分享图"></p>
]]></content>
      
        <categories>
            
            <category> 看到别人的风采 </category>
            
            <category> 不自量力的思考 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 不自量力的思考 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[读「人类简史」]]></title>
      <url>/2017/06/23/%E8%AF%BB%E3%80%8C%E4%BA%BA%E7%B1%BB%E7%AE%80%E5%8F%B2%E3%80%8D/</url>
      <content type="html"><![CDATA[<h6 id="original-bad-mask-2017-06-11"><a href="#original-bad-mask-2017-06-11" class="headerlink" title="original bad-mask  2017-06-11"></a>original bad-mask  2017-06-11</h6><p>从我下决心多读书以提升我残缺的修养后，我就从开始「逼」我自己读书到现在的「习惯」读书了。慢慢地，到现在，其实二三百页的书，比如「活着」、「群山回首」、「灿烂千阳」、「围城」等等之类的书我应该只要三、四个小时或者四、五个小时就可以了，但是这本书我竟然用了一个月，而且没有读懂，真的是没有读懂，可是虽然没有读懂，也得写点什么，不然我连回忆的资料都没有，怎么和别人矫情我是一个文艺的人，哈哈，我就是开个玩笑。</p>
<p>这本书是四个大部分，认知革命，农业革命，人类的融合统一，科学革命。</p>
<p>在认知革命中，作者指出，人类历史上众多的灾难，不论是生灵涂炭的战乱还是生态遭逢的浩劫，其实都是源自一种仓促的地位跳跃「长久以来，人类一直处于食物链的中间位置，大约 10 万年前智人崛起，人类一跃而居于食物链顶端，这场从中段到顶端的大跳跃，暂且可称为仓促的地位跳跃」。智人语言最独特的功能就是「讨论虚构的事物」，这样虚构的故事赋予了智人前所未有的能力，让我们得以集结大批人力、灵活合作，这个暂且可以称为认知革命。自从认知革命后，智人就能依据不断变化的需求迅速调整行为，这等于开启了一条采用「文化演变」的快速道路，而不再停留在「基因演化」这条总是堵车的道路上。走上这条道路后，智人合作的能力一日千里，很快就远远甩掉了其他所有人类和动物物种。</p>
<p>从农业革命这一部分开始，书中的思想一再冲击着我的思想，我的已知，我就开始读不懂了。从伏尔泰说出「世界上本来就没有神，但可别告诉我的仆人，免得他半夜偷偷把我宰了」这句话时，虽然对于仆人有一些自私和残忍的意思，但是意味着伏尔泰一方面在证实某些的谎言，一方面自己又受到认清真相的威胁，这就是伟人的伟大之处吗。「插一句题外话，这不禁让我想到，在『 飘 』这本书中，女主斯佳丽家的黑人奴隶在解放前夕还在担心，自己不做仆人又能去哪里，甚至还想认命的跟着女主，为女主服务 」。身为人类，我们不可能脱离想象所构建的秩序。每一次我们以为自己打破了监狱的高墙、迈向自由的前方，其实只是到了另一间更大的监狱，把活动范围稍稍加以扩大。文字本来应该是人类意识的仆人，但现在正在反仆为主。</p>
<p>人类的融合统一。某个偶然的历史事件，成了僵化的社会制度常规。为了好理解，举个例子：黑人因为曾经的迫害，被解放后，也处于一种家境贫寒、教育缺失的状态。虽说有机会一夕致富，但是白人完全相信黑人就是笨、懒、暴力、放荡。所以黑人几乎没有机会去担任银行职员这种受人尊敬的职位，所以白人对黑人的偏见会越来越深，时间长了，人们就会认为黑人确实没那么聪明，没那么努力。黑人被困在这个恶性循环里，他们申请不到白领的工作，是因为别人以为他们笨，但证明他们笨的，又是因为白领中很少有黑人。所以随着时间的流逝，不公不义的歧视常常只是加剧而不是改善。富者越富，而贫者越贫。教育带来进一步的教育，而无知带来进一步的无知。历史上过去的受害者，很可能会再次受害。而历史上过去的特权分子，他们的特权也很可能依然存在。接下来谈到信任，金钱正是有史以来最普遍也是最有效的互信系统。嗯，不能继续说下去了，书中设计到「经济学」、「哲学」、「社会学」等的分析，我实在不敢继续向下写，有人告诉我，打脸会疼，所以我不往下写了，哈哈。</p>
<p>对于科学革命，我只能摘抄一句，我们走向的是「生态的灾难」还是「科技的天堂」。</p>
<p>其实写这个的时候，我应该先惭愧一下的，因为真的没有读懂这本书。不过书是不怕读的，「围城」我读了三遍，「定位」读了两遍，「追风筝的人」、「拆掉思维里的墙」我读了不知道几遍，所以这本书会在我的复读名单里。虽然有些恐惧，但是「未来简史」这本书已经入手，自己找的坑就得跳，还得穿着高跟鞋跳。。。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2644950-bfc42cc342f445e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/200" alt="人类简史"></p>
]]></content>
      
        <categories>
            
            <category> 文艺路上的搬砖者 </category>
            
            <category> 史学 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 人类简史 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[读「行走在爱与恨之间」]]></title>
      <url>/2017/06/23/%E8%AF%BB%E3%80%8C%E8%A1%8C%E8%B5%B0%E5%9C%A8%E7%88%B1%E4%B8%8E%E6%81%A8%E4%B9%8B%E9%97%B4%E3%80%8D/</url>
      <content type="html"><![CDATA[<h6 id="original-bad-mask-2017-06-18"><a href="#original-bad-mask-2017-06-18" class="headerlink" title="original bad-mask  2017-06-18"></a>original bad-mask  2017-06-18</h6><p>其实这种书，从名字来看，不应该在我的读书名单里，我也不知道为什么买了，今天收拾好后，找书来读，想来自己最近各方面表现略差，就选中这本书，以在生活上提醒下自己，后来发现自己不免太肤浅了些，因为这本书是去让我了解一个国家 – 日本，而且若以作者的角度来读这本书，真的有一种感觉如作者所写的那样 – 放纵情感，理智不会答应；而一位理智，公众的情感又如何面对？所以，对这本书，分寸的拿捏成了最富挑战性的工作，像是一次赌博，容不得分心。</p>
<p>插一句题外话，分寸的拿捏，大概就是情商吧。从肤浅的角度来说，这个因素影响了周围人对你的喜爱与讨厌的程度。毕竟，我们要学会做人。</p>
<p>我没有去过日本，甚至没有在网络上特意搜索过除战争题材外任何有关日本的消息，毕竟我没有能力「甚至没有想过，毕竟我太肤浅了」去分析一个怎样的日本，和中国建立怎样的外交，中日两国在未来又会有怎样的发展。在「日本初印象」一节中，第一次看到拍摄的日本的房屋的照片，真的就是「恍惚有种错觉，似乎并没有离开中国」。</p>
<p>第二部分，不可避免谈到靖国神社，源于「荀子」中「故君子居必择乡，游必就士」这句而命名的「游就馆」，相必是靖国神社里不可不去的地方，馆内播放着录像片，「里面把日本对中国的侵略战争称为『支那事变』，把日本发动的太平洋战争称为『自卫战争』，历史在这里被完全扭曲着展示了出来」。读完第二节，其实真的体会到那个词 – 分寸的拿捏。因为作者需要用完全客观的角度附上图，并且说「这是日军在『二战』中国年使用过的战斗机」，不能说「这个肮脏、无耻的机器，在当时<em>**</em>的手中，掠夺了不知多少人的生命」。</p>
<p>「靖国神社」，「和平博物馆」，「神风特工队和平会馆」，一个是完全是歪曲事实，一个搜索各种侵华的资料并且教育日本人，一个「愿意承认战争带来的苦难，但是却有意或无意地回避了当年日本军国主义发动战争的罪恶」。三种不同的面孔，来综合解读日本，了解他，然后了解自己。</p>
<p>在「从垃圾处理看日本环保」一节中，其实我是很震惊的。在我孙子市「名字有些怪异」，垃圾分类已经实行了20多年，某些城市，垃圾分类可以细分到几十种，「家庭的作用」是重要一环，光瓶类就可以分为无色瓶、茶色瓶、其他瓶等等。而且这种繁琐的做法在经过一段时间的磨合后，已经被绝大多数日本人所接受，并在很大程度上改变着人们的生活态度。所以，我们呢？拿我举例「基本上不会乱丢垃圾的」，手里拿着冰淇淋的罐，走到垃圾桶前，根本不知道这属于「可回收」还是「不可回收」，呵呵。。。愧疚。</p>
<p>其实，在本书中，并不知道为什么要加入「滨崎步：最艰难的一次采访」一节，许是为了丰富文章内服，对于日本文化覆盖更全，又或者是拉近这本书与年轻读者的距离。因为文中确实说了「从某种意义上来说，白岩松与滨崎步都觉得对方很陌生，采访一开始就不太活跃」，以及「让采访组等待了很长时间，滨崎步才从卧室里款款而出，跟所有采访的日本人的准时相比，她显得格外不同」。也不知道为什么「众曾根康弘：日本政坛的常青树」与「御手洗：日本财界总理」会在「滨崎步：最艰难的一次采访」一节之后，虽然知道 90% 是根据采访的时序来的，但还是觉得读的时候，跳跃有点大。</p>
<p>读完后，确实让我想到了一些不着边际的问题，比如去日本，要去看看「靖国神社」，「和平博物馆」；在东京，逛不起「银座」的话，可以去逛「涩谷」和「里原宿」；去大阪松原市的佐渡岳部屋，看相扑训练；在鹿儿岛的指宿市体验「沙浴」；去东京的动漫节感受手冢治虫先生的「哆啦A梦」。</p>
<p>读了四个小时，有些泛，还是谢谢作者。</p>
<p>要写到结尾了，来几句鸡汤：<br>有时，认真的了解对方，也是了解自己并让自己变得更好的一条路。<br>别人是靠不住的，还是要靠自己。<br>历史告诉我们：没有外人可以打败我们，我们自己却可能败于自己搜下，想要战胜别人，首先要战胜自己。<br>有理有礼有节，保持冷静，继续前行。<br>打开，书与文字才有了最终的意义。<br>离开理性与客观，新闻将毫无力量。<br>渡边淳一说，爱的顶点是死亡。</p>
<p>另外，今天是父亲节。老爹，我给你买了「我最喜欢」的酸奶，给你充了话费，给你发了红包「虽然不多，但是我 qiong ，哈哈」，而且，特意让你闺女在今天又提高了下文学修养，还写下了这篇「不算文章」的文章，怎样，有没有觉得你闺女又进步了一下？嗯，有我这么一个闺女真为你高兴。我知道，你不是最好的父亲，但是你给我你能给的所有。我也不是最好的闺女，但是我正在努力给你我能给的更好的未来。另外，真心感谢我能有一个很开明的妈妈。有一个能够让我更有责任感的姐姐。生活在这个家庭，很幸福。不过未来我的决定，还是希望得到你们的支持。我会与你们谈论更多我在北京的生活，告诉你们，你们还年轻，没有与我脱节，让沟通更顺畅些。还有啊，你闺女为了促进邻里和谐，把整个屋子的地板都擦了，到家我妈都不让我干，想让我多休息会啊，艾马，把自己都感动了。「竟然写了一个半小时。。。」</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2644950-e2d96b78f4208557.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/200" alt="行走在爱与恨之间"></p>
]]></content>
      
        <categories>
            
            <category> 文艺路上的搬砖者 </category>
            
            <category> 了解日本 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 行走在爱与恨之间 </tag>
            
            <tag> 看日本 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[读「明朝那些事儿」]]></title>
      <url>/2017/06/23/%E8%AF%BB%E3%80%8C%E6%98%8E%E6%9C%9D%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF%E3%80%8D/</url>
      <content type="html"><![CDATA[<h6 id="original-bad-mask-2017-05-01"><a href="#original-bad-mask-2017-05-01" class="headerlink" title="original bad-mask  2017-05-01"></a>original bad-mask  2017-05-01</h6><p>写这个之前，理应来个前言。</p>
<p>不了解我的人可能不知道，我这个人就是一个「生活常识白痴」与「文科白痴」。「文科白痴」的意思呢就是从来不分东南西北，走路只看标志性建筑、从来不知中国地区分布，没有导游的情况下，自己去了哪里，浏览了什么古迹啥的根本不知道、答政治题只能奔着「中国特色社会主义好」一类的话胡诌、历史更是没有一点认知，基本上初中、高中那点知识从来没有从老师那里得到过，更谈不上什么还给老师。买这本书的初衷呢，就是增加一下自己的文化底蕴，我也知道我看过的书，记不住多少，但是时间久了，总能给我提升一下我「庸俗」的气质，所以只要是我喜欢的人，我都一直在推荐他们去读一些书，读完后可以交流下，相互之间学习下。我认为工作之余，事业之外，你要有点什么，比如，去个咖啡馆装装文艺什么的，找个人不用说话，干坐着什么的，都是朋友之间可以做的事情。</p>
<p>题外话，小黄车一直在给我发短信，包括刚刚，以一天四五条的频率接受，还是不同的手机号码，我怎么办？？？还有啊，今天回北京，细跟鞋加上小包，再加上大的行李箱，再加上没有电梯的地铁站，若不是一小哥来帮我提行李箱，我会坐在地上哭。。。真的，直接甩手不干的那种「哭」，你们可以理解为咆哮。</p>
<p>行了，回转话题。</p>
<p>这本书，讲了从打江山到守江山的过程。这个江山就是「明」。这里我就说几个典型人物，其实不过是摘抄的文中字句，我只是想让我记住罢了。</p>
<p>陈友谅，朱元璋的敌人之一，就是我不杀死你，你就要和我抢江山的那种仇。性格：比人不敢杀上司，杀兄弟，但是他干起来毫不犹豫，而且干完后，大大方方承认就是我干的。鄱阳湖之战是他事业的终点，同时也是生命的终点。其实也算印证了一句话「这场赌局一旦开始，无论你是赢是输，都不能走，赌局会继续进行，直到其中一个人输掉一切，才会结束」以及「不要相信暴力，历史已经证明，暴力不能解决问题」。我再补一句「不管你的人生信条是什么，也许可以提升一下情商」。</p>
<p>张士诚，对于朱元璋来说，你我只能同时存在一个，因为一个天下不可能有两个君主。这个人，意志坚强，白手起家，最终成就了一方霸业，但是在乱世中，小富即安的心理是要不得的，不是王就是寇。最后对朱元璋说「你并不比我强，我之所以失败，只是上天照顾你、不照顾我而已」。说完，朱元璋被激怒，人生走到终点。</p>
<p>元朝，可以说是朱元璋最痛恨的敌手，在朱元璋的心里，正是在这个残暴王朝的统治之下，他失去了父亲、母亲，家破人亡，自己流离失所，乞讨度日，不得已才造反。二十年的战争，二十年的努力，蓝玉完成了朱元璋的任命，使一百九十六年的元朝统治就此灭亡。「结束了，一切都结束了」。</p>
<p>马皇后，信条「愿得贤人共理天下」。也被朱元璋引为至理名言。她是一个始终用自己的爱心关怀他人的人，即使是生命的最后一刻。她是他最爱的女人。他很早就知道哭不能解决任何问题，但是，此时，他抑制不住自己的情绪，放声大哭，只有哭才能发泄他心中的极度的痛苦！因为他突然发现，眼前这个人是他的一切。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">生如夏花，逝如冬雪；</div><div class="line">人生如此，何悔何怨。</div></pre></td></tr></table></figure></p>
<p>最后，朱元璋，父母双亡，没有背景，没有依靠，无数次躲过死神，无数次从死人堆中爬出来，然后继续前进。他是大明天下的缔造者。奋斗一生，为子孙积赞下大笔的财富，但是人生走到终点，他的子孙的眼睛却只盯着他手中的那笔财富，投向这个老人的只是冷冰冰的目光。</p>
<p>马场：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">皇觉寺里，明月相伴，孤灯一盏；</div><div class="line">濠州城中，谨小慎微，奋发图强；</div><div class="line">鄱阳湖畔，碧波千里，火光冲天；</div><div class="line">茫茫大漠，金戈铁马，舞剑黄沙；</div><div class="line">开创帝国，保世宏规，光耀后代！</div><div class="line"></div><div class="line">我本淮右布衣，天下于我何加焉！</div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2644950-de9a0c2263f09a66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/200" alt="image.png"></p>
]]></content>
      
        <categories>
            
            <category> 文艺路上的搬砖者 </category>
            
            <category> 明朝 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 明朝那些事儿 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
